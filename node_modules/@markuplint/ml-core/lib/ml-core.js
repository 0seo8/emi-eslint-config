var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MLCore_ast, _MLCore_document, _MLCore_filename, _MLCore_locale, _MLCore_parser, _MLCore_parserOptions, _MLCore_pretenders, _MLCore_rules, _MLCore_ruleset, _MLCore_schemas, _MLCore_sourceCode, _MLCore_configErrors;
import { ParserError } from '@markuplint/parser-utils';
import { log, enableDebug } from './debug.js';
import { Document } from './ml-dom/index.js';
const resultLog = log.extend('result');
export class MLCore {
    constructor({ parser, sourceCode, ruleset, rules, locale, schemas, parserOptions, pretenders, filename, debug, configErrors, }) {
        _MLCore_ast.set(this, null);
        _MLCore_document.set(this, void 0);
        _MLCore_filename.set(this, void 0);
        _MLCore_locale.set(this, void 0);
        _MLCore_parser.set(this, void 0);
        _MLCore_parserOptions.set(this, void 0);
        _MLCore_pretenders.set(this, void 0);
        _MLCore_rules.set(this, void 0);
        _MLCore_ruleset.set(this, void 0);
        _MLCore_schemas.set(this, void 0);
        _MLCore_sourceCode.set(this, void 0);
        _MLCore_configErrors.set(this, void 0);
        if (debug) {
            enableDebug();
        }
        __classPrivateFieldSet(this, _MLCore_parser, parser, "f");
        __classPrivateFieldSet(this, _MLCore_sourceCode, sourceCode, "f");
        __classPrivateFieldSet(this, _MLCore_parserOptions, parserOptions, "f");
        __classPrivateFieldSet(this, _MLCore_ruleset, {
            rules: ruleset.rules ?? {},
            nodeRules: ruleset.nodeRules ?? [],
            childNodeRules: ruleset.childNodeRules ?? [],
        }, "f");
        __classPrivateFieldSet(this, _MLCore_locale, locale, "f");
        __classPrivateFieldSet(this, _MLCore_schemas, schemas, "f");
        __classPrivateFieldSet(this, _MLCore_filename, filename, "f");
        __classPrivateFieldSet(this, _MLCore_rules, [...rules], "f");
        __classPrivateFieldSet(this, _MLCore_pretenders, [...pretenders], "f");
        __classPrivateFieldSet(this, _MLCore_configErrors, [...(configErrors ?? [])], "f");
        this._parse();
        this._createDocument();
    }
    get document() {
        return __classPrivateFieldGet(this, _MLCore_document, "f");
    }
    setCode(sourceCode) {
        __classPrivateFieldSet(this, _MLCore_sourceCode, sourceCode, "f");
        this._parse();
        this._createDocument();
    }
    update({ parser, ruleset, rules, locale, schemas, parserOptions, configErrors }) {
        __classPrivateFieldSet(this, _MLCore_parser, parser ?? __classPrivateFieldGet(this, _MLCore_parser, "f"), "f");
        __classPrivateFieldSet(this, _MLCore_ruleset, {
            rules: ruleset?.rules ?? __classPrivateFieldGet(this, _MLCore_ruleset, "f").rules,
            nodeRules: ruleset?.nodeRules ?? __classPrivateFieldGet(this, _MLCore_ruleset, "f").nodeRules,
            childNodeRules: ruleset?.childNodeRules ?? __classPrivateFieldGet(this, _MLCore_ruleset, "f").childNodeRules,
        }, "f");
        __classPrivateFieldSet(this, _MLCore_rules, rules?.slice() ?? __classPrivateFieldGet(this, _MLCore_rules, "f"), "f");
        __classPrivateFieldSet(this, _MLCore_locale, locale ?? __classPrivateFieldGet(this, _MLCore_locale, "f"), "f");
        __classPrivateFieldSet(this, _MLCore_schemas, schemas ?? __classPrivateFieldGet(this, _MLCore_schemas, "f"), "f");
        __classPrivateFieldSet(this, _MLCore_configErrors, [...(configErrors ?? [])], "f");
        if (parserOptions &&
            (parserOptions.ignoreFrontMatter !== __classPrivateFieldGet(this, _MLCore_parserOptions, "f").ignoreFrontMatter ||
                parserOptions.authoredElementName !== __classPrivateFieldGet(this, _MLCore_parserOptions, "f").authoredElementName)) {
            this._parse();
        }
        this._createDocument();
    }
    async verify(fix = false) {
        log('verify: start');
        const violations = [];
        if (__classPrivateFieldGet(this, _MLCore_document, "f") instanceof ParserError) {
            violations.push({
                ruleId: 'parse-error',
                severity: 'error',
                message: __classPrivateFieldGet(this, _MLCore_document, "f").message,
                col: __classPrivateFieldGet(this, _MLCore_document, "f").col,
                line: __classPrivateFieldGet(this, _MLCore_document, "f").line,
                raw: __classPrivateFieldGet(this, _MLCore_document, "f").raw,
            });
            log('verify: error %o', __classPrivateFieldGet(this, _MLCore_document, "f").message);
            return violations;
        }
        for (const error of __classPrivateFieldGet(this, _MLCore_configErrors, "f")) {
            violations.push({
                ruleId: 'config-error',
                severity: 'warning',
                message: error.message,
                col: 1,
                line: 1,
                raw: '',
            });
        }
        for (const rule of __classPrivateFieldGet(this, _MLCore_rules, "f")) {
            const ruleInfo = rule.getRuleInfo(__classPrivateFieldGet(this, _MLCore_ruleset, "f"), rule.name);
            if (ruleInfo.disabled && ruleInfo.nodeRules.length === 0 && ruleInfo.childNodeRules.length === 0) {
                continue;
            }
            log('%s Rule: verify', rule.name);
            const results = await rule.verify(__classPrivateFieldGet(this, _MLCore_document, "f"), __classPrivateFieldGet(this, _MLCore_locale, "f"), fix).catch(error => {
                if (error instanceof ParserError) {
                    return error;
                }
                throw error;
            });
            if (results instanceof ParserError) {
                log('%s Rule: verify error %o', rule.name, results.message);
                violations.push({
                    ruleId: 'parse-error',
                    severity: 'error',
                    message: results.message,
                    col: results.col,
                    line: results.line,
                    raw: results.raw,
                });
            }
            else {
                violations.push(...results);
            }
            log('%s Rule: verify end', rule.name);
        }
        if (resultLog.enabled) {
            // eslint-disable-next-line unicorn/no-array-reduce
            const { e, w, i } = violations.reduce((c, v) => {
                if (v.severity === 'error')
                    c.e += 1;
                if (v.severity === 'warning')
                    c.w += 1;
                if (v.severity === 'info')
                    c.i += 1;
                return c;
            }, { e: 0, w: 0, i: 0 });
            resultLog('Error: %d', e);
            resultLog('Warning: %d', w);
            resultLog('Info: %d', i);
        }
        log('verify: end');
        return violations;
    }
    _createDocument() {
        if (!__classPrivateFieldGet(this, _MLCore_ast, "f")) {
            return;
        }
        try {
            __classPrivateFieldSet(this, _MLCore_document, new Document(__classPrivateFieldGet(this, _MLCore_ast, "f"), __classPrivateFieldGet(this, _MLCore_ruleset, "f"), __classPrivateFieldGet(this, _MLCore_schemas, "f"), {
                filename: __classPrivateFieldGet(this, _MLCore_filename, "f"),
                endTag: __classPrivateFieldGet(this, _MLCore_parser, "f").endTag,
                booleanish: __classPrivateFieldGet(this, _MLCore_parser, "f").booleanish,
                tagNameCaseSensitive: __classPrivateFieldGet(this, _MLCore_parser, "f").tagNameCaseSensitive,
                pretenders: __classPrivateFieldGet(this, _MLCore_pretenders, "f"),
            }), "f");
        }
        catch (error) {
            if (error instanceof ParserError) {
                __classPrivateFieldSet(this, _MLCore_document, error, "f");
            }
            else {
                throw error;
            }
        }
    }
    _parse() {
        try {
            __classPrivateFieldSet(this, _MLCore_ast, __classPrivateFieldGet(this, _MLCore_parser, "f").parse(__classPrivateFieldGet(this, _MLCore_sourceCode, "f"), __classPrivateFieldGet(this, _MLCore_parserOptions, "f")), "f");
        }
        catch (error) {
            log('Caught the parse error: %O', error);
            __classPrivateFieldSet(this, _MLCore_ast, null, "f");
            if (error instanceof ParserError) {
                __classPrivateFieldSet(this, _MLCore_document, error, "f");
            }
            else {
                throw error;
            }
        }
    }
}
_MLCore_ast = new WeakMap(), _MLCore_document = new WeakMap(), _MLCore_filename = new WeakMap(), _MLCore_locale = new WeakMap(), _MLCore_parser = new WeakMap(), _MLCore_parserOptions = new WeakMap(), _MLCore_pretenders = new WeakMap(), _MLCore_rules = new WeakMap(), _MLCore_ruleset = new WeakMap(), _MLCore_schemas = new WeakMap(), _MLCore_sourceCode = new WeakMap(), _MLCore_configErrors = new WeakMap();
