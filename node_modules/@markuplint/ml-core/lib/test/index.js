import { parser } from '@markuplint/html-parser';
import spec from '@markuplint/html-spec';
import { convertRuleset } from '../convert-ruleset.js';
import { MLDocument } from '../ml-dom/node/document.js';
export function createTestDocument(sourceCode, options) {
    const ast = options?.parser
        ? 'parser' in options.parser
            ? options.parser.parser.parse(sourceCode, options.config?.parserOptions)
            : options.parser.parse(sourceCode, options.config?.parserOptions)
        : parser.parse(sourceCode, options?.config?.parserOptions);
    const ruleset = convertRuleset(options?.config);
    const document = new MLDocument(ast, ruleset, [options?.specs ?? {}, {}]);
    return document;
}
export function createTestNodeList(sourceCode, options) {
    const document = createTestDocument(sourceCode, options);
    return document.nodeList;
}
export function createTestTokenList(sourceCode, options) {
    const document = createTestDocument(sourceCode, options);
    return document.getTokenList();
}
export function createTestElement(sourceCode, options) {
    const document = createTestDocument(sourceCode, options);
    const el = document.nodeList[0];
    if (el && el.is(el.ELEMENT_NODE)) {
        return el;
    }
    throw new TypeError(`Could not parse it to be an element from: ${sourceCode}`);
}
/**
 * for test suite
 */
export function dummySchemas() {
    return [spec];
}
