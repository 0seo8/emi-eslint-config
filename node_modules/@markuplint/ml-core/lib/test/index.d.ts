import type { MLElement } from '../ml-dom/node/element.js';
import type { MLNode } from '../ml-dom/node/node.js';
import type { MLToken } from '../ml-dom/token/token.js';
import type { MLASTNode, MLASTToken, MLParser } from '@markuplint/ml-ast';
import type { Config, PlainData, RuleConfigValue } from '@markuplint/ml-config';
import type { ExtendedSpec, MLMLSpec } from '@markuplint/ml-spec';
import { MLDocument } from '../ml-dom/node/document.js';
export type CreateTestOptions = {
    readonly config?: Config;
    readonly parser?: {
        readonly parser: Readonly<MLParser>;
    } | Readonly<MLParser>;
    readonly specs?: MLMLSpec;
};
export declare function createTestDocument<T extends RuleConfigValue = any, O extends PlainData = any>(sourceCode: string, options?: CreateTestOptions): MLDocument<T, O>;
export declare function createTestNodeList(sourceCode: string, options?: CreateTestOptions): readonly MLNode<any, any, MLASTNode>[];
export declare function createTestTokenList(sourceCode: string, options?: CreateTestOptions): readonly MLToken<MLASTToken>[];
export declare function createTestElement(sourceCode: string, options?: CreateTestOptions): MLElement<any, any>;
/**
 * for test suite
 */
export declare function dummySchemas(): [MLMLSpec, ...ExtendedSpec[]];
