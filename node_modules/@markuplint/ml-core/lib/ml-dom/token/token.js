var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MLToken_endCol, _MLToken_endLine, _MLToken_endOffset, _MLToken_fixed, _MLToken_raw, _MLToken_startCol, _MLToken_startLine, _MLToken_startOffset;
export class MLToken {
    constructor(astToken) {
        _MLToken_endCol.set(this, void 0);
        _MLToken_endLine.set(this, void 0);
        _MLToken_endOffset.set(this, void 0);
        _MLToken_fixed.set(this, void 0);
        _MLToken_raw.set(this, void 0);
        _MLToken_startCol.set(this, void 0);
        _MLToken_startLine.set(this, void 0);
        _MLToken_startOffset.set(this, void 0);
        this._astToken = astToken;
        __classPrivateFieldSet(this, _MLToken_raw, astToken.raw, "f");
        __classPrivateFieldSet(this, _MLToken_fixed, astToken.raw, "f");
        this.uuid = astToken.uuid;
        __classPrivateFieldSet(this, _MLToken_startLine, astToken.startLine, "f");
        __classPrivateFieldSet(this, _MLToken_endLine, astToken.endLine, "f");
        __classPrivateFieldSet(this, _MLToken_startCol, astToken.startCol, "f");
        __classPrivateFieldSet(this, _MLToken_endCol, astToken.endCol, "f");
        __classPrivateFieldSet(this, _MLToken_startOffset, astToken.startOffset, "f");
        __classPrivateFieldSet(this, _MLToken_endOffset, astToken.endOffset, "f");
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDOMToken`
     */
    get endCol() {
        return __classPrivateFieldGet(this, _MLToken_endCol, "f");
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDOMToken`
     */
    get endLine() {
        return __classPrivateFieldGet(this, _MLToken_endLine, "f");
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDOMToken`
     */
    get endOffset() {
        return __classPrivateFieldGet(this, _MLToken_endOffset, "f");
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDOMToken`
     */
    get fixed() {
        return __classPrivateFieldGet(this, _MLToken_fixed, "f");
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDOMToken`
     */
    get raw() {
        return __classPrivateFieldGet(this, _MLToken_raw, "f");
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDOMToken`
     */
    get startCol() {
        return __classPrivateFieldGet(this, _MLToken_startCol, "f");
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDOMToken`
     */
    get startLine() {
        return __classPrivateFieldGet(this, _MLToken_startLine, "f");
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDOMToken`
     */
    get startOffset() {
        return __classPrivateFieldGet(this, _MLToken_startOffset, "f");
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDOMToken`
     */
    fix(raw) {
        __classPrivateFieldSet(this, _MLToken_fixed, raw, "f");
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDOMToken`
     */
    toString(fixed = false) {
        return fixed ? __classPrivateFieldGet(this, _MLToken_fixed, "f") : __classPrivateFieldGet(this, _MLToken_raw, "f");
    }
}
_MLToken_endCol = new WeakMap(), _MLToken_endLine = new WeakMap(), _MLToken_endOffset = new WeakMap(), _MLToken_fixed = new WeakMap(), _MLToken_raw = new WeakMap(), _MLToken_startCol = new WeakMap(), _MLToken_startLine = new WeakMap(), _MLToken_startOffset = new WeakMap();
