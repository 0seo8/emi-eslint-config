import type { MLElement } from './element.js';
import type { AttributeNodeType } from './types.js';
import type { MLASTAttr } from '@markuplint/ml-ast';
import type { PlainData, RuleConfigValue } from '@markuplint/ml-config';
import { MLToken } from '../token/token.js';
import { MLDomTokenList } from './dom-token-list.js';
import { MLNode } from './node.js';
export declare class MLAttr<T extends RuleConfigValue, O extends PlainData = undefined> extends MLNode<T, O, MLASTAttr> implements Attr {
    #private;
    readonly candidate?: string;
    readonly endQuote: MLToken | null;
    readonly equal: MLToken | null;
    readonly isDirective?: true;
    readonly isDuplicatable: boolean;
    readonly isDynamicValue?: true;
    readonly nameNode: MLToken | null;
    /**
     * @implements DOM API: `Attr`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-previoussibling%E2%91%A0
     */
    readonly ownerElement: MLElement<T, O>;
    readonly spacesAfterEqual: MLToken | null;
    readonly spacesBeforeEqual: MLToken | null;
    readonly spacesBeforeName: MLToken | null;
    readonly startQuote: MLToken | null;
    readonly valueNode: MLToken | null;
    /**
     * Returns the "string" if HTML syntax. Otherwise, returns a type in its syntax.
     *
     * @default "string"
     * @implements `@markuplint/ml-core` API: `MLAttr`
     */
    readonly valueType: 'string' | 'number' | 'boolean' | 'code';
    constructor(astToken: MLASTAttr, ownElement: MLElement<T, O>);
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Attr`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-attr-localname
     */
    get localName(): string;
    /**
     *
     * @implements DOM API: `Attr`
     * @see https://dom.spec.whatwg.org/#dom-attr-name
     */
    get name(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Attr`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-attr-namespaceuri
     */
    get namespaceURI(): string | null;
    /**
     * Returns a string appropriate for the type of node as `Attr`
     *
     * @see https://dom.spec.whatwg.org/#ref-for-attr%E2%91%A4
     */
    get nodeName(): string;
    /**
     * Returns a number appropriate for the type of `Attr`
     */
    get nodeType(): AttributeNodeType;
    get nodeValue(): string;
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Attr`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-attr-prefix
     */
    get prefix(): string | null;
    /**
     * @implements `@markuplint/ml-core` API: `MLAttr`
     */
    get rule(): import("@markuplint/ml-config").RuleInfo<T, O>;
    /**
     * @implements DOM API: `Attr`
     * @see https://dom.spec.whatwg.org/#dom-attr-specified
     */
    get specified(): true;
    /**
     * @implements `@markuplint/ml-core` API: `MLAttr`
     */
    get tokenList(): MLDomTokenList | null;
    /**
     * @implements DOM API: `Attr`
     * @see https://dom.spec.whatwg.org/#dom-attr-value
     */
    get value(): string;
    /**
     * Fixes the attribute value.
     * If the attribute is not a spread attribute, it calls the `fix` method of the `valueNode`.
     *
     * @implements `@markuplint/ml-core` API: `MLAttr`
     *
     * @param raw - The raw attribute value.
     */
    fix(raw: string): void;
    /**
     * @implements `@markuplint/ml-core` API: `MLAttr`
     */
    toNormalizeString(): string;
    /**
     * Returns a string representation of the attribute.
     *
     * @implements DOM API: `Attr`
     *
     * @param includesSpacesBeforeName - Whether to include spaces before the attribute name.
     * @returns The string representation of the attribute.
     */
    toString(fixed?: boolean): string;
}
