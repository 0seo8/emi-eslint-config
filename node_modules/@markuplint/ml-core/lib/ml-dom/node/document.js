var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MLDocument_filename, _MLDocument_tokenList;
import { exchangeValueOnRule, mergeRule } from '@markuplint/ml-config';
import { schemaToSpec, getAccname, getComputedRole, mayBeFocusable, getComputedAriaProps, isExposed, ARIA_RECOMMENDED_VERSION, } from '@markuplint/ml-spec';
import { ConfigParserError } from '@markuplint/parser-utils';
import { InvalidSelectorError, matchSelector } from '@markuplint/selector';
import { log as coreLog } from '../../debug.js';
import { createNode } from '../helper/create-node.js';
import { nodeListToDebugMaps } from '../helper/debug.js';
import { sequentialWalker, syncWalk } from '../helper/walkers.js';
import { nodeListToHTMLCollection } from './node-list.js';
import { MLParentNode } from './parent-node.js';
import { RuleMapper } from './rule-mapper.js';
import { UnexpectedCallError } from './unexpected-call-error.js';
const log = coreLog.extend('ml-dom');
const docLog = log.extend('document');
const ruleLog = docLog.extend('rule');
export class MLDocument extends MLParentNode {
    /**
     *
     * @param ast node list of markuplint AST
     * @param ruleset ruleset object
     */
    constructor(ast, ruleset, schemas, options) {
        // @ts-ignore
        super(ast, null);
        /**
         *
         */
        this.currentRule = null;
        /**
         *
         */
        _MLDocument_filename.set(this, void 0);
        _MLDocument_tokenList.set(this, null);
        this.isFragment = ast.isFragment;
        this.specs = schemaToSpec(schemas);
        this.booleanish = options?.booleanish ?? false;
        this.endTag = options?.endTag ?? 'omittable';
        __classPrivateFieldSet(this, _MLDocument_filename, options?.filename, "f");
        this.tagNameCaseSensitive = options?.tagNameCaseSensitive ?? false;
        // console.log(ast.nodeList.map((n, i) => `${i}: ${n.uuid} "${n.raw.trim()}"(${n.type})`));
        this.nodeList = Object.freeze(ast.nodeList
            .map(astNode => {
            if (astNode.type === 'endtag') {
                return;
            }
            return createNode(astNode, this);
        })
            .filter((n) => !!n));
        this._pretending(options?.pretenders);
        try {
            this._ruleMapping(ruleset);
        }
        catch (error) {
            if (error instanceof InvalidSelectorError) {
                throw new ConfigParserError(error.message, {
                    filePath: 'the configuration',
                });
            }
            throw error;
        }
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get URL() {
        throw new UnexpectedCallError('Not supported "URL" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get activeElement() {
        throw new UnexpectedCallError('Not supported "activeElement" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get adoptedStyleSheets() {
        throw new UnexpectedCallError('Not supported "adoptedStyleSheets" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get alinkColor() {
        throw new UnexpectedCallError('Not supported "alinkColor" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get all() {
        throw new UnexpectedCallError('Not supported "all" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get anchors() {
        throw new UnexpectedCallError('Not supported "anchors" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get applets() {
        throw new UnexpectedCallError('Not supported "applets" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get bgColor() {
        throw new UnexpectedCallError('Not supported "bgColor" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get body() {
        throw new UnexpectedCallError('Not supported "body" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get characterSet() {
        throw new UnexpectedCallError('Not supported "characterSet" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get charset() {
        throw new UnexpectedCallError('Not supported "charset" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get compatMode() {
        throw new UnexpectedCallError('Not supported "compatMode" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get contentType() {
        throw new UnexpectedCallError('Not supported "contentType" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get cookie() {
        throw new UnexpectedCallError('Not supported "cookie" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get currentScript() {
        throw new UnexpectedCallError('Not supported "currentScript" property');
    }
    /**
     * Window object for calling the `getComputedStyle` and the `getPropertyValue` that
     * are needed by **Accessible Name and Description Computation**.
     * But it always returns the empty object.
     * (It may improve to possible to compute the name from the `style` attribute in the future.)
     *
     * @implements DOM API: `Document`
     */
    get defaultView() {
        return {
            getComputedStyle(
            // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
            _el) {
                return {
                    getPropertyValue(_propName) {
                        return {};
                    },
                };
            },
        };
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get designMode() {
        throw new UnexpectedCallError('Not supported "designMode" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get dir() {
        throw new UnexpectedCallError('Not supported "dir" property');
    }
    /**
     * @implements DOM API: `Document`
     */
    get doctype() {
        for (const node of this.nodeList) {
            if (node.is(node.DOCUMENT_TYPE_NODE)) {
                return node;
            }
        }
        return null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get documentElement() {
        throw new UnexpectedCallError('Not supported "documentElement" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get documentURI() {
        throw new UnexpectedCallError('Not supported "documentURI" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get domain() {
        throw new UnexpectedCallError('Not supported "domain" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get embeds() {
        throw new UnexpectedCallError('Not supported "embeds" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get fgColor() {
        throw new UnexpectedCallError('Not supported "fgColor" property');
    }
    /**
     * It could be used in rule, make sure it is immutable
     *
     * @implements `@markuplint/ml-core` API: `MLDOMDocument`
     */
    get filename() {
        return __classPrivateFieldGet(this, _MLDocument_filename, "f");
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get fonts() {
        throw new UnexpectedCallError('Not supported "fonts" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get forms() {
        throw new UnexpectedCallError('Not supported "forms" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get fullscreen() {
        throw new UnexpectedCallError('Not supported "fullscreen" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get fullscreenElement() {
        throw new UnexpectedCallError('Not supported "fullscreenElement" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get fullscreenEnabled() {
        throw new UnexpectedCallError('Not supported "FullscreenEnabledURL" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get head() {
        throw new UnexpectedCallError('Not supported "head" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get hidden() {
        throw new UnexpectedCallError('Not supported "hidden" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get images() {
        throw new UnexpectedCallError('Not supported "images" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get implementation() {
        throw new UnexpectedCallError('Not supported "implementation" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get inputEncoding() {
        throw new UnexpectedCallError('Not supported "inputEncoding" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get lastModified() {
        throw new UnexpectedCallError('Not supported "lastModified" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get linkColor() {
        throw new UnexpectedCallError('Not supported "linkColor" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get links() {
        throw new UnexpectedCallError('Not supported "links" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get location() {
        throw new UnexpectedCallError('Not supported "location" property');
    }
    /**
     * Returns a string appropriate for the type of node as `Document`
     *
     * @see https://dom.spec.whatwg.org/#ref-for-document%E2%91%A8
     */
    get nodeName() {
        return '#document';
    }
    /**
     * Returns a number appropriate for the type of `Document`
     */
    get nodeType() {
        return this.DOCUMENT_NODE;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onabort() {
        throw new UnexpectedCallError('Not supported "onabort" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onanimationcancel() {
        throw new UnexpectedCallError('Not supported "onanimationcancel" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onanimationend() {
        throw new UnexpectedCallError('Not supported "onanimationend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onanimationiteration() {
        throw new UnexpectedCallError('Not supported "onanimationiteration" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onanimationstart() {
        throw new UnexpectedCallError('Not supported "onanimationstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onauxclick() {
        throw new UnexpectedCallError('Not supported "onauxclick" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onbeforeinput() {
        throw new UnexpectedCallError('Not supported "onbeforeinput" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onbeforetoggle() {
        throw new UnexpectedCallError('Not supported "onbeforetoggle" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onblur() {
        throw new UnexpectedCallError('Not supported "onblur" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncancel() {
        throw new UnexpectedCallError('Not supported "oncanplay" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncanplay() {
        throw new UnexpectedCallError('Not supported "oncanplay" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncanplaythrough() {
        throw new UnexpectedCallError('Not supported "oncanplaythrough" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onchange() {
        throw new UnexpectedCallError('Not supported "onchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onclick() {
        throw new UnexpectedCallError('Not supported "onclick" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onclose() {
        throw new UnexpectedCallError('Not supported "onclose" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncontextmenu() {
        throw new UnexpectedCallError('Not supported "oncontextmenu" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncopy() {
        throw new UnexpectedCallError('Not supported "oncopy" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncuechange() {
        throw new UnexpectedCallError('Not supported "oncuechange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oncut() {
        throw new UnexpectedCallError('Not supported "oncut" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondblclick() {
        throw new UnexpectedCallError('Not supported "ondblclick" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondrag() {
        throw new UnexpectedCallError('Not supported "ondrag" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondragend() {
        throw new UnexpectedCallError('Not supported "ondragend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondragenter() {
        throw new UnexpectedCallError('Not supported "ondragenter" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondragleave() {
        throw new UnexpectedCallError('Not supported "ondragleave" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondragover() {
        throw new UnexpectedCallError('Not supported "ondragover" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondragstart() {
        throw new UnexpectedCallError('Not supported "ondragstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondrop() {
        throw new UnexpectedCallError('Not supported "ondrop" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ondurationchange() {
        throw new UnexpectedCallError('Not supported "ondurationchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onemptied() {
        throw new UnexpectedCallError('Not supported "onemptied" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onended() {
        throw new UnexpectedCallError('Not supported "onended" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onerror() {
        throw new UnexpectedCallError('Not supported "onerror" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onfocus() {
        throw new UnexpectedCallError('Not supported "onfocus" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onformdata() {
        throw new UnexpectedCallError('Not supported "onformdata" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onfullscreenchange() {
        throw new UnexpectedCallError('Not supported "onfullscreenchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onfullscreenerror() {
        throw new UnexpectedCallError('Not supported "onfullscreenerror" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ongotpointercapture() {
        throw new UnexpectedCallError('Not supported "ongotpointercapture" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oninput() {
        throw new UnexpectedCallError('Not supported "oninput" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get oninvalid() {
        throw new UnexpectedCallError('Not supported "oninvalid" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onkeydown() {
        throw new UnexpectedCallError('Not supported "onkeydown" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onkeypress() {
        throw new UnexpectedCallError('Not supported "onkeypress" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onkeyup() {
        throw new UnexpectedCallError('Not supported "onkeyup" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onload() {
        throw new UnexpectedCallError('Not supported "onload" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onloadeddata() {
        throw new UnexpectedCallError('Not supported "onloadeddata" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onloadedmetadata() {
        throw new UnexpectedCallError('Not supported "onloadedmetadata" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onloadstart() {
        throw new UnexpectedCallError('Not supported "onloadstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onlostpointercapture() {
        throw new UnexpectedCallError('Not supported "onlostpointercapture" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmousedown() {
        throw new UnexpectedCallError('Not supported "onmousedown" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmouseenter() {
        throw new UnexpectedCallError('Not supported "onmouseenter" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmouseleave() {
        throw new UnexpectedCallError('Not supported "onmouseleave" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmousemove() {
        throw new UnexpectedCallError('Not supported "onmousemove" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmouseout() {
        throw new UnexpectedCallError('Not supported "onmouseout" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmouseover() {
        throw new UnexpectedCallError('Not supported "onmouseover" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onmouseup() {
        throw new UnexpectedCallError('Not supported "onmouseup" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpaste() {
        throw new UnexpectedCallError('Not supported "onpaste" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpause() {
        throw new UnexpectedCallError('Not supported "onpause" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onplay() {
        throw new UnexpectedCallError('Not supported "onplay" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onplaying() {
        throw new UnexpectedCallError('Not supported "onplaying" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointercancel() {
        throw new UnexpectedCallError('Not supported "onpointercancel" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerdown() {
        throw new UnexpectedCallError('Not supported "onpointerdown" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerenter() {
        throw new UnexpectedCallError('Not supported "onpointerenter" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerleave() {
        throw new UnexpectedCallError('Not supported "onpointerleave" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerlockchange() {
        throw new UnexpectedCallError('Not supported "onpointerlockchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerlockerror() {
        throw new UnexpectedCallError('Not supported "onpointerlockerror" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointermove() {
        throw new UnexpectedCallError('Not supported "onpointermove" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerout() {
        throw new UnexpectedCallError('Not supported "onpointerout" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerover() {
        throw new UnexpectedCallError('Not supported "onpointerover" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onpointerup() {
        throw new UnexpectedCallError('Not supported "onpointerup" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onprogress() {
        throw new UnexpectedCallError('Not supported "onprogress" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onratechange() {
        throw new UnexpectedCallError('Not supported "onratechange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onreadystatechange() {
        throw new UnexpectedCallError('Not supported "onreadystatechange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onreset() {
        throw new UnexpectedCallError('Not supported "onreset" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onresize() {
        throw new UnexpectedCallError('Not supported "onresize" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onscroll() {
        throw new UnexpectedCallError('Not supported "onscroll" property');
    }
    get onscrollend() {
        throw new UnexpectedCallError('Not supported "onscrollend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onsecuritypolicyviolation() {
        throw new UnexpectedCallError('Not supported "onsecuritypolicyviolation" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onseeked() {
        throw new UnexpectedCallError('Not supported "onseeked" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onseeking() {
        throw new UnexpectedCallError('Not supported "onseeking" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onselect() {
        throw new UnexpectedCallError('Not supported "onselect" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onselectionchange() {
        throw new UnexpectedCallError('Not supported "onselectionchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onselectstart() {
        throw new UnexpectedCallError('Not supported "onselectstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onslotchange() {
        throw new UnexpectedCallError('Not supported "onslotchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onstalled() {
        throw new UnexpectedCallError('Not supported "onstalled" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onsubmit() {
        throw new UnexpectedCallError('Not supported "onsubmit" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onsuspend() {
        throw new UnexpectedCallError('Not supported "onsuspend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontimeupdate() {
        throw new UnexpectedCallError('Not supported "ontimeupdate" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontoggle() {
        throw new UnexpectedCallError('Not supported "ontoggle" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontransitioncancel() {
        throw new UnexpectedCallError('Not supported "ontransitioncancel" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontransitionend() {
        throw new UnexpectedCallError('Not supported "ontransitionend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontransitionrun() {
        throw new UnexpectedCallError('Not supported "ontransitionrun" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get ontransitionstart() {
        throw new UnexpectedCallError('Not supported "ontransitionstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onvisibilitychange() {
        throw new UnexpectedCallError('Not supported "onvisibilitychange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onvolumechange() {
        throw new UnexpectedCallError('Not supported "onvolumechange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwaiting() {
        throw new UnexpectedCallError('Not supported "onwaiting" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwebkitanimationend() {
        throw new UnexpectedCallError('Not supported "onwebkitanimationend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwebkitanimationiteration() {
        throw new UnexpectedCallError('Not supported "onwebkitanimationiteration" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwebkitanimationstart() {
        throw new UnexpectedCallError('Not supported "onwebkitanimationstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwebkittransitionend() {
        throw new UnexpectedCallError('Not supported "onwebkittransitionend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get onwheel() {
        throw new UnexpectedCallError('Not supported "onwheel" property');
    }
    get ownerDocument() {
        return null;
    }
    get ownerMLDocument() {
        return this;
    }
    /**
     * @implements DOM API: `Document`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-parentnode%E2%91%A0
     */
    get parentNode() {
        return null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get pictureInPictureElement() {
        throw new UnexpectedCallError('Not supported "pictureInPictureElement" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get pictureInPictureEnabled() {
        throw new UnexpectedCallError('Not supported "pictureInPictureEnabled" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get plugins() {
        throw new UnexpectedCallError('Not supported "plugins" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get pointerLockElement() {
        throw new UnexpectedCallError('Not supported "pointerLockElement" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get readyState() {
        throw new UnexpectedCallError('Not supported "readyState" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get referrer() {
        throw new UnexpectedCallError('Not supported "referrer" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get rootElement() {
        throw new UnexpectedCallError('Not supported "rootElement" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get scripts() {
        throw new UnexpectedCallError('Not supported "scripts" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get scrollingElement() {
        throw new UnexpectedCallError('Not supported "scrollingElement" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get styleSheets() {
        throw new UnexpectedCallError('Not supported "styleSheets" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get timeline() {
        throw new UnexpectedCallError('Not supported "timeline" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get title() {
        throw new UnexpectedCallError('Not supported "title" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    get visibilityState() {
        throw new UnexpectedCallError('Not supported "visibilityState" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    get vlinkColor() {
        throw new UnexpectedCallError('Not supported "vlinkColor" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    adoptNode(node) {
        throw new UnexpectedCallError('Not supported "adoptNode" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    captureEvents() {
        throw new UnexpectedCallError('Not supported "captureEvents" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    caretRangeFromPoint(x, y) {
        throw new UnexpectedCallError('Not supported "caretRangeFromPoint" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    clear() {
        throw new UnexpectedCallError('Not supported "clear" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    close() {
        throw new UnexpectedCallError('Not supported "close" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createAttribute(localName) {
        throw new UnexpectedCallError('Not supported "createAttribute" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createAttributeNS(namespace, qualifiedName) {
        throw new UnexpectedCallError('Not supported "createAttributeNS" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createCDATASection(data) {
        throw new UnexpectedCallError('Not supported "createCDATASection" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createComment(data) {
        throw new UnexpectedCallError('Not supported "createComment" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createDocumentFragment() {
        throw new UnexpectedCallError('Not supported "createDocumentFragment" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createElement(tagName, options) {
        throw new UnexpectedCallError('Not supported "createElement" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createElementNS(namespace, qualifiedName, options) {
        throw new UnexpectedCallError('Not supported "createElementNS" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createEvent(eventInterface) {
        throw new UnexpectedCallError('Not supported "createEvent" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createExpression(expression, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    resolver) {
        throw new UnexpectedCallError('Not supported "createExpression" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createNSResolver(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    nodeResolver) {
        throw new UnexpectedCallError('Not supported "createNSResolver" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createNodeIterator(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    root, whatToShow, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    filter) {
        throw new UnexpectedCallError('Not supported "createNodeIterator" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createProcessingInstruction(target, data) {
        throw new UnexpectedCallError('Not supported "createProcessingInstruction" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createRange() {
        throw new UnexpectedCallError('Not supported "createRange" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createTextNode(data) {
        throw new UnexpectedCallError('Not supported "createTextNode" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    createTreeWalker(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    root, whatToShow, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    filter) {
        throw new UnexpectedCallError('Not supported "createTreeWalker" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDocument`
     */
    debugMap() {
        return nodeListToDebugMaps(this.nodeList, true);
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    elementFromPoint(x, y) {
        throw new UnexpectedCallError('Not supported "elementFromPoint" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    elementsFromPoint(x, y) {
        throw new UnexpectedCallError('Not supported "elementsFromPoint" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    evaluate(expression, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    contextNode, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    resolver, type, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    result) {
        throw new UnexpectedCallError('Not supported "evaluate" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    execCommand(commandId, showUI, value) {
        throw new UnexpectedCallError('Not supported "execCommand" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    exitFullscreen() {
        throw new UnexpectedCallError('Not supported "exitFullscreen" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    exitPictureInPicture() {
        throw new UnexpectedCallError('Not supported "exitPictureInPicture" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    exitPointerLock() {
        throw new UnexpectedCallError('Not supported "exitPointerLock" method');
    }
    getAccessibilityProp(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    node, ariaVersion = ARIA_RECOMMENDED_VERSION) {
        if (!node.is(node.ELEMENT_NODE)) {
            return null;
        }
        if (['slot'].includes(node.localName)) {
            return {
                unknown: true,
            };
        }
        const exposed = isExposed(node, node.ownerMLDocument.specs, ariaVersion);
        if (!exposed) {
            return {
                unknown: false,
                exposedToTree: false,
            };
        }
        const aria = {
            unknown: false,
            exposedToTree: true,
        };
        const role = getComputedRole(node.ownerMLDocument.specs, node, ariaVersion);
        const name = getAccname(node).trim();
        const focusable = mayBeFocusable(node, node.ownerMLDocument.specs);
        const nameRequired = role.role?.accessibleNameRequired ?? false;
        const nameProhibited = role.role?.accessibleNameProhibited ?? false;
        const hasSlot = !!node.querySelector('slot');
        aria.role = role.role?.name;
        aria.nameRequired = nameRequired;
        aria.nameProhibited = nameProhibited;
        aria.name =
            name ||
                (hasSlot
                    ? {
                        unknown: true,
                    }
                    : '');
        aria.focusable = focusable;
        for (const prop of Object.values(getComputedAriaProps(node.ownerMLDocument.specs, node, ariaVersion))) {
            if (!prop.required && prop.from === 'default') {
                continue;
            }
            aria.props = aria.props || {};
            const propName = prop.name.replace('aria-', '');
            aria.props[propName] = {
                value: prop.value ?? null,
                required: prop.required,
            };
        }
        return aria;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getAnimations() {
        throw new UnexpectedCallError('Not supported "getAnimations" method');
    }
    /**
     * @implements DOM API: `Document`
     */
    getElementById(elementId) {
        // TODO:
        return this.querySelector(`#${elementId}`);
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getElementsByClassName(classNames) {
        return nodeListToHTMLCollection(this.querySelectorAll(classNames));
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getElementsByName(elementName) {
        throw new UnexpectedCallError('Not supported "getElementsByName" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getElementsByTagName(qualifiedName) {
        return nodeListToHTMLCollection(this.querySelectorAll(qualifiedName));
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getElementsByTagNameNS(namespace, localName) {
        throw new UnexpectedCallError('Not supported "getElementsByTagNameNS" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    getSelection() {
        throw new UnexpectedCallError('Not supported "getSelection" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDocument`
     */
    getTokenList() {
        if (__classPrivateFieldGet(this, _MLDocument_tokenList, "f")) {
            return __classPrivateFieldGet(this, _MLDocument_tokenList, "f");
        }
        const tokens = [];
        for (const node of this.nodeList) {
            tokens.push(node);
            if (node.is(node.ELEMENT_NODE) && node.closeTag) {
                tokens.push(node.closeTag);
            }
        }
        tokens.sort((a, b) => a.startOffset - b.startOffset);
        __classPrivateFieldSet(this, _MLDocument_tokenList, Object.freeze(tokens), "f");
        return __classPrivateFieldGet(this, _MLDocument_tokenList, "f");
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    hasFocus() {
        throw new UnexpectedCallError('Not supported "hasFocus" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    hasStorageAccess() {
        throw new UnexpectedCallError('Not supported "hasStorageAccess" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    importNode(node, deep) {
        throw new UnexpectedCallError('Not supported "importNode" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    open(url, name, features) {
        throw new UnexpectedCallError('Not supported "open" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    queryCommandEnabled(commandId) {
        throw new UnexpectedCallError('Not supported "queryCommandEnabled" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    queryCommandIndeterm(commandId) {
        throw new UnexpectedCallError('Not supported "queryCommandIndeterm" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    queryCommandState(commandId) {
        throw new UnexpectedCallError('Not supported "queryCommandState" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    queryCommandSupported(commandId) {
        throw new UnexpectedCallError('Not supported "queryCommandSupported" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    queryCommandValue(commandId) {
        throw new UnexpectedCallError('Not supported "queryCommandValue" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Document`
     */
    releaseEvents() {
        throw new UnexpectedCallError('Not supported "releaseEvents" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    requestStorageAccess() {
        throw new UnexpectedCallError('Not supported "requestStorageAccess" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDocument`
     */
    searchNodeByLocation(line, col) {
        for (const node of this.nodeList) {
            if (node.startLine <= line && line <= node.endLine && node.startCol <= col && col <= node.endCol) {
                return node;
            }
        }
        return null;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDocument`
     */
    setRule(rule) {
        this.currentRule = rule;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLDocument`
     */
    toString(fixed = false) {
        if (!fixed) {
            return this.raw;
        }
        let raw = this.raw;
        let offset = 0;
        for (const node of this.getTokenList()) {
            const nodeRaw = node.toString(true);
            if (nodeRaw === node.raw) {
                continue;
            }
            raw = raw.slice(0, node.startOffset + offset) + nodeRaw + raw.slice(node.endOffset + offset);
            offset += nodeRaw.length - (node.endOffset - node.startOffset);
        }
        return raw;
    }
    walkOn(type, walker, skipWhenRuleIsDisabled = true) {
        return sequentialWalker(this.nodeList, node => {
            if (skipWhenRuleIsDisabled && node.rule.disabled) {
                return;
            }
            if (type === 'Element' && node.is(node.ELEMENT_NODE)) {
                return walker(node);
            }
            if (type === 'Text' && node.is(node.TEXT_NODE)) {
                return walker(node);
            }
            if (type === 'Comment' && node.is(node.COMMENT_NODE)) {
                return walker(node);
            }
            if (type === 'Attr' && node.is(node.ELEMENT_NODE)) {
                return sequentialWalker([...node.attributes], attr => walker(attr));
            }
            if (type === 'ElementCloseTag' && node.is(node.ELEMENT_NODE) && node.closeTag) {
                return walker(node.closeTag);
            }
        });
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    write(...text) {
        throw new UnexpectedCallError('Not supported "write" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Document`
     */
    writeln(...text) {
        throw new UnexpectedCallError('Not supported "writeln" method');
    }
    _pretending(pretenders) {
        if (docLog.enabled) {
            docLog('Pretending: %O', pretenders);
        }
        for (const node of this.nodeList) {
            if (node.is(node.ELEMENT_NODE)) {
                node.pretending(pretenders);
            }
        }
    }
    _ruleMapping(ruleset) {
        if (docLog.enabled) {
            docLog('Rule Mapping: %O', Object.keys(ruleset.rules));
        }
        const ruleMapper = new RuleMapper(this);
        // global rules to #document
        for (const ruleName of Object.keys(ruleset.rules)) {
            const rule = ruleset.rules[ruleName];
            if (rule == null) {
                continue;
            }
            ruleMapper.set(this, ruleName, {
                from: 'rules',
                specificity: [0, 0, 0],
                rule,
            });
        }
        // add rules to node
        for (const node of this.nodeList) {
            if (docLog.enabled) {
                docLog('Add rules to node <%s>', node.nodeName);
            }
            // global rules to each element
            for (const ruleName of Object.keys(ruleset.rules)) {
                const rule = ruleset.rules[ruleName];
                if (rule == null) {
                    continue;
                }
                ruleMapper.set(node, ruleName, {
                    from: 'rules',
                    specificity: [0, 0, 0],
                    rule,
                });
            }
            if (!node.is(node.ELEMENT_NODE) && !node.is(node.TEXT_NODE)) {
                continue;
            }
            const selectorTarget = node.is(node.ELEMENT_NODE) ? node : null;
            // node specs and special rules for node by selector
            for (const nodeRule of ruleset.nodeRules) {
                if (!nodeRule.rules) {
                    continue;
                }
                if (!selectorTarget) {
                    continue;
                }
                const selector = nodeRule.selector ?? nodeRule.regexSelector;
                const matches = matchSelector(selectorTarget, selector);
                if (!matches.matched) {
                    continue;
                }
                if (docLog.enabled) {
                    docLog('Matched nodeRule: <%s>(%s)', node.nodeName, matches.selector || '*');
                }
                const ruleList = Object.keys(nodeRule.rules);
                for (const ruleName of ruleList) {
                    const rule = nodeRule.rules[ruleName];
                    if (rule == null) {
                        continue;
                    }
                    const convertedRule = exchangeValueOnRule(rule, matches.data ?? {});
                    if (convertedRule === undefined) {
                        continue;
                    }
                    const globalRule = ruleset.rules[ruleName];
                    const mergedRule = globalRule == null ? convertedRule : mergeRule(globalRule, convertedRule);
                    ruleLog('↑ nodeRule (%s): %O', ruleName, mergedRule);
                    ruleMapper.set(node, ruleName, {
                        from: 'nodeRules',
                        specificity: matches.specificity,
                        rule: mergedRule,
                    });
                }
            }
            // overwrite rule to child node
            if (selectorTarget && ruleset.childNodeRules.length > 0) {
                const descendants = [];
                const children = [...selectorTarget.childNodes];
                syncWalk(children, childNode => {
                    descendants.push(childNode);
                });
                for (const nodeRule of ruleset.childNodeRules) {
                    if (!nodeRule.rules) {
                        continue;
                    }
                    const nodeRuleRules = nodeRule.rules;
                    const selector = nodeRule.selector ?? nodeRule.regexSelector;
                    if (selector == null) {
                        continue;
                    }
                    const matches = matchSelector(selectorTarget, selector);
                    if (!matches.matched) {
                        continue;
                    }
                    if (docLog.enabled) {
                        docLog('Matched childNodeRule: <%s>(%s), inheritance: %o', selectorTarget.nodeName, matches.selector || '*', !!nodeRule.inheritance);
                    }
                    const targetDescendants = nodeRule.inheritance ? descendants : children;
                    for (const ruleName of Object.keys(nodeRuleRules)) {
                        const rule = nodeRuleRules[ruleName];
                        if (rule == null) {
                            continue;
                        }
                        const convertedRule = exchangeValueOnRule(rule, matches.data ?? {});
                        if (convertedRule === undefined) {
                            continue;
                        }
                        const globalRule = ruleset.rules[ruleName];
                        const mergedRule = globalRule == null ? convertedRule : mergeRule(globalRule, convertedRule);
                        ruleLog('↑ childNodeRule (%s): %O', ruleName, mergedRule);
                        for (const descendant of targetDescendants) {
                            ruleMapper.set(descendant, ruleName, {
                                from: 'childNodeRules',
                                specificity: matches.specificity,
                                rule: mergedRule,
                            });
                        }
                    }
                }
            }
        }
        ruleMapper.apply();
    }
}
_MLDocument_filename = new WeakMap(), _MLDocument_tokenList = new WeakMap();
