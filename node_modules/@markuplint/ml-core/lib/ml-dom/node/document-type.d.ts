import type { MLDocument } from './document.js';
import type { MLElement } from './element.js';
import type { DocumentTypeNodeType } from './types.js';
import type { MLASTDoctype } from '@markuplint/ml-ast';
import type { PlainData, RuleConfigValue } from '@markuplint/ml-config';
import { MLNode } from './node.js';
export declare class MLDocumentType<T extends RuleConfigValue, O extends PlainData = undefined> extends MLNode<T, O, MLASTDoctype> implements DocumentType {
    readonly name: string;
    readonly publicId: string;
    readonly systemId: string;
    constructor(astNode: MLASTDoctype, document: MLDocument<T, O>);
    /**
     * Returns a string appropriate for the type of node as `DocumentType`
     *
     * @see https://dom.spec.whatwg.org/#ref-for-documenttype%E2%91%A0%E2%93%AA
     */
    get nodeName(): string;
    /**
     * Returns a number appropriate for the type of `DocumentType`
     */
    get nodeType(): DocumentTypeNodeType;
    /**
     * @implements DOM API: `CharacterData`
     */
    after(...nodes: (string | MLElement<any, any>)[]): void;
    /**
     * @implements DOM API: `CharacterData`
     */
    before(...nodes: (string | MLElement<any, any>)[]): void;
    /**
     * @implements DOM API: `CharacterData`
     */
    remove(): void;
    /**
     * @implements DOM API: `CharacterData`
     */
    replaceWith(...nodes: (string | MLElement<any, any>)[]): void;
}
