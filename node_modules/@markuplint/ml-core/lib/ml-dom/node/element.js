/* global StylePropertyMap, StylePropertyMapReadOnly */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MLElement_attributes, _MLElement_fixedNodeName, _MLElement_getChildElementsAndTextNodeWithoutWhitespacesCache, _MLElement_localName, _MLElement_normalizedAttrs, _MLElement_normalizedString;
import { resolveNamespace } from '@markuplint/ml-spec';
import { createSelector } from '@markuplint/selector';
import { getAccname } from '../helper/accname.js';
import { after, before, nextElementSibling, previousElementSibling, remove, replaceWith, } from '../manipulations/child-node-methods.js';
import { MLToken } from '../token/token.js';
import { MLAttr } from './attr.js';
import { MLDomTokenList } from './dom-token-list.js';
import { MLElementCloseTag } from './element-close-tag.js';
import { toNamedNodeMap } from './named-node-map.js';
import { toHTMLCollection } from './node-list.js';
import { MLParentNode } from './parent-node.js';
import { UnexpectedCallError } from './unexpected-call-error.js';
const HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
export class MLElement extends MLParentNode {
    constructor(astNode, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    document) {
        super(astNode, document);
        _MLElement_attributes.set(this, void 0);
        _MLElement_fixedNodeName.set(this, void 0);
        _MLElement_getChildElementsAndTextNodeWithoutWhitespacesCache.set(this, null);
        _MLElement_localName.set(this, void 0);
        _MLElement_normalizedAttrs.set(this, new Map());
        _MLElement_normalizedString.set(this, null);
        this.pretenderContext = null;
        __classPrivateFieldSet(this, _MLElement_attributes, astNode.attributes.map(attr => new MLAttr(attr, this)), "f");
        this.selfClosingSolidus = astNode.selfClosingSolidus ? new MLToken(astNode.selfClosingSolidus) : null;
        this.closeTag = astNode.pairNode ? new MLElementCloseTag(astNode.pairNode, document, this) : null;
        const ns = resolveNamespace(astNode.nodeName, astNode.namespace);
        this.namespaceURI = ns.namespaceURI;
        this.elementType = astNode.elementType;
        __classPrivateFieldSet(this, _MLElement_localName, ns.localName, "f");
        this.isForeignElement = this.namespaceURI !== HTML_NAMESPACE;
        __classPrivateFieldSet(this, _MLElement_fixedNodeName, astNode.nodeName, "f");
        this.isOmitted = astNode.isGhost;
        this.tagOpenChar = astNode.tagOpenChar;
        this.tagCloseChar = astNode.tagCloseChar;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get accessKey() {
        throw new UnexpectedCallError('Not supported "accessKey" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get accessKeyLabel() {
        throw new UnexpectedCallError('Not supported "accessKeyLabel" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaAtomic() {
        throw new UnexpectedCallError('Not supported "ariaAtomic" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaAutoComplete() {
        throw new UnexpectedCallError('Not supported "ariaAutoComplete" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaBusy() {
        throw new UnexpectedCallError('Not supported "ariaBusy" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaChecked() {
        throw new UnexpectedCallError('Not supported "ariaChecked" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaColCount() {
        throw new UnexpectedCallError('Not supported "ariaColCount" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaColIndex() {
        throw new UnexpectedCallError('Not supported "ariaColIndex" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaColIndexText() {
        throw new UnexpectedCallError('Not supported "ariaColIndexText" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaColSpan() {
        throw new UnexpectedCallError('Not supported "ariaColSpan" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaCurrent() {
        throw new UnexpectedCallError('Not supported "ariaCurrent" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaDescription() {
        throw new UnexpectedCallError('Not supported "ariaDescription" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaDisabled() {
        throw new UnexpectedCallError('Not supported "ariaDisabled" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaExpanded() {
        throw new UnexpectedCallError('Not supported "ariaExpanded" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaHasPopup() {
        throw new UnexpectedCallError('Not supported "ariaHasPopup" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaHidden() {
        throw new UnexpectedCallError('Not supported "ariaHidden" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaInvalid() {
        throw new UnexpectedCallError('Not supported "ariaInvalid" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaKeyShortcuts() {
        throw new UnexpectedCallError('Not supported "ariaKeyShortcuts" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaLabel() {
        throw new UnexpectedCallError('Not supported "ariaLabel" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaLevel() {
        throw new UnexpectedCallError('Not supported "ariaLevel" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaLive() {
        throw new UnexpectedCallError('Not supported "ariaLive" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaModal() {
        throw new UnexpectedCallError('Not supported "ariaModal" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaMultiLine() {
        throw new UnexpectedCallError('Not supported "ariaMultiLine" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaMultiSelectable() {
        throw new UnexpectedCallError('Not supported "ariaMultiSelectable" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaOrientation() {
        throw new UnexpectedCallError('Not supported "ariaOrientation" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaPlaceholder() {
        throw new UnexpectedCallError('Not supported "ariaPlaceholder" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaPosInSet() {
        throw new UnexpectedCallError('Not supported "ariaPosInSet" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaPressed() {
        throw new UnexpectedCallError('Not supported "ariaPressed" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaReadOnly() {
        throw new UnexpectedCallError('Not supported "ariaReadOnly" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRequired() {
        throw new UnexpectedCallError('Not supported "ariaRequired" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRoleDescription() {
        throw new UnexpectedCallError('Not supported "ariaRoleDescription" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRowCount() {
        throw new UnexpectedCallError('Not supported "ariaRowCount" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRowIndex() {
        throw new UnexpectedCallError('Not supported "ariaRowIndex" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRowIndexText() {
        throw new UnexpectedCallError('Not supported "ariaRowIndexText" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaRowSpan() {
        throw new UnexpectedCallError('Not supported "ariaRowSpan" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaSelected() {
        throw new UnexpectedCallError('Not supported "ariaSelected" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaSetSize() {
        throw new UnexpectedCallError('Not supported "ariaSetSize" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaSort() {
        throw new UnexpectedCallError('Not supported "ariaSort" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaValueMax() {
        throw new UnexpectedCallError('Not supported "ariaValueMax" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaValueMin() {
        throw new UnexpectedCallError('Not supported "ariaValueMin" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaValueNow() {
        throw new UnexpectedCallError('Not supported "ariaValueNow" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ariaValueText() {
        throw new UnexpectedCallError('Not supported "ariaValueText" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-slotable-assignedslot
     */
    get assignedSlot() {
        throw new UnexpectedCallError('Not supported "assignedSlot" property');
    }
    get attributeStyleMap() {
        throw new UnexpectedCallError('Not supported "attributeStyleMap" property');
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-attributes
     */
    get attributes() {
        const origin = this.pretenderContext?.type === 'pretender' ? __classPrivateFieldGet(this.pretenderContext.as, _MLElement_attributes, "f") : __classPrivateFieldGet(this, _MLElement_attributes, "f");
        if (__classPrivateFieldGet(this, _MLElement_normalizedAttrs, "f").has(origin)) {
            return __classPrivateFieldGet(this, _MLElement_normalizedAttrs, "f").get(origin);
        }
        const names = new Set();
        const attrs = [];
        for (const attr of origin) {
            if (names.has(attr.name)) {
                /**
                 * Skips a duplicated attribute
                 *
                 *@see https://html.spec.whatwg.org/#parse-error-duplicate-attribute
                 */
                continue;
            }
            attrs.push(attr);
        }
        const map = toNamedNodeMap(attrs);
        __classPrivateFieldGet(this, _MLElement_normalizedAttrs, "f").set(origin, map);
        return map;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get autocapitalize() {
        throw new UnexpectedCallError('Not supported "autocapitalize" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get autofocus() {
        throw new UnexpectedCallError('Not supported "autofocus" property');
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-classlist%E2%91%A0
     */
    get classList() {
        const classAttrs = this.getAttributeToken('class');
        const value = classAttrs.map(c => c.value).join(' ');
        return new MLDomTokenList(value, classAttrs);
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-classname%E2%91%A0
     */
    get className() {
        return this.classList.value;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-clientheight-1
     */
    get clientHeight() {
        throw new UnexpectedCallError('Not supported "clientHeight" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-clientleft-1
     */
    get clientLeft() {
        throw new UnexpectedCallError('Not supported "clientLeft" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-clienttop-1
     */
    get clientTop() {
        throw new UnexpectedCallError('Not supported "clientTop" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-clientwidth-1
     */
    get clientWidth() {
        throw new UnexpectedCallError('Not supported "clientWidth" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get contentEditable() {
        throw new UnexpectedCallError('Not supported "contentEditable" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get dataset() {
        throw new UnexpectedCallError('Not supported "dataset" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get dir() {
        throw new UnexpectedCallError('Not supported "dir" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get draggable() {
        throw new UnexpectedCallError('Not supported "draggable" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get enterKeyHint() {
        throw new UnexpectedCallError('Not supported "enterKeyHint" property');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    get fixedNodeName() {
        return __classPrivateFieldGet(this, _MLElement_fixedNodeName, "f");
    }
    get hasSpreadAttr() {
        return __classPrivateFieldGet(this, _MLElement_attributes, "f").some(attr => attr.localName === '#spread');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get hidden() {
        throw new UnexpectedCallError('Not supported "hidden" property');
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-id%E2%91%A0
     */
    get id() {
        return this.getAttribute('id') ?? '';
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://html.spec.whatwg.org/multipage/interaction.html#dom-inert
     */
    get inert() {
        throw new UnexpectedCallError('Not supported "inert" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://w3c.github.io/DOM-Parsing/#dom-innerhtml-innerhtml
     */
    get innerHTML() {
        throw new UnexpectedCallError('Not supported "innerHTML" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get innerText() {
        throw new UnexpectedCallError('Not supported "innerText" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get inputMode() {
        throw new UnexpectedCallError('Not supported "inputMode" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get isContentEditable() {
        throw new UnexpectedCallError('Not supported "isContentEditable" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get lang() {
        throw new UnexpectedCallError('Not supported "lang" property');
    }
    /**
     * Returns a lowercase name if it is an HTML element.
     *
     * ```html
     * <div> => "div"
     * <DIV> => "div"
     * <svg> => "svg"
     * <foreignObject> => "foreignObject"
     * <x-foo> => "x-foo"
     * <X-FOO> => "x-foo"
     * ```
     *
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-localname%E2%91%A0
     */
    get localName() {
        if (this.pretenderContext?.type === 'pretender') {
            return this.pretenderContext.as.localName;
        }
        if (this.isForeignElement || this.elementType !== 'html') {
            return __classPrivateFieldGet(this, _MLElement_localName, "f");
        }
        return __classPrivateFieldGet(this, _MLElement_localName, "f").toLowerCase();
    }
    /**
     * The element immediately following the specified one in its parent's children list.
     *
     * @readonly
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-nondocumenttypechildnode-nextelementsibling%E2%91%A1
     */
    get nextElementSibling() {
        return nextElementSibling(this);
    }
    /**
     * Returns a string appropriate for the type of node as `Element`
     *
     * @see https://dom.spec.whatwg.org/#ref-for-element%E2%91%A2%E2%93%AA
     */
    get nodeName() {
        if (this.pretenderContext?.type === 'pretender') {
            return this.pretenderContext.as.nodeName;
        }
        if (this.isForeignElement || this.elementType !== 'html') {
            return this._astToken.nodeName;
        }
        return this._astToken.nodeName.toUpperCase();
    }
    /**
     * Returns a number appropriate for the type of `Element`
     */
    get nodeType() {
        return this.ELEMENT_NODE;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get nonce() {
        throw new UnexpectedCallError('Not supported "nonce" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get offsetHeight() {
        throw new UnexpectedCallError('Not supported "offsetHeight" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get offsetLeft() {
        throw new UnexpectedCallError('Not supported "offsetLeft" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get offsetParent() {
        throw new UnexpectedCallError('Not supported "offsetParent" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get offsetTop() {
        throw new UnexpectedCallError('Not supported "offsetTop" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get offsetWidth() {
        throw new UnexpectedCallError('Not supported "offsetWidth" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onabort() {
        throw new UnexpectedCallError('Not supported "onabort" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onanimationcancel() {
        throw new UnexpectedCallError('Not supported "onanimationcancel" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onanimationend() {
        throw new UnexpectedCallError('Not supported "onanimationend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onanimationiteration() {
        throw new UnexpectedCallError('Not supported "onanimationiteration" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onanimationstart() {
        throw new UnexpectedCallError('Not supported "onanimationstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onauxclick() {
        throw new UnexpectedCallError('Not supported "onauxclick" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onbeforeinput() {
        throw new UnexpectedCallError('Not supported "onbeforeinput" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onbeforetoggle() {
        throw new UnexpectedCallError('Not supported "onbeforetoggle" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onblur() {
        throw new UnexpectedCallError('Not supported "onblur" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncancel() {
        throw new UnexpectedCallError('Not supported "oncanplay" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncanplay() {
        throw new UnexpectedCallError('Not supported "oncanplay" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncanplaythrough() {
        throw new UnexpectedCallError('Not supported "oncanplaythrough" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onchange() {
        throw new UnexpectedCallError('Not supported "onchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onclick() {
        throw new UnexpectedCallError('Not supported "onclick" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onclose() {
        throw new UnexpectedCallError('Not supported "onclose" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncontextmenu() {
        throw new UnexpectedCallError('Not supported "oncontextmenu" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncopy() {
        throw new UnexpectedCallError('Not supported "oncopy" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncuechange() {
        throw new UnexpectedCallError('Not supported "onpointerleave" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oncut() {
        throw new UnexpectedCallError('Not supported "onpointerleave" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondblclick() {
        throw new UnexpectedCallError('Not supported "ondblclick" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondrag() {
        throw new UnexpectedCallError('Not supported "ondrag" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondragend() {
        throw new UnexpectedCallError('Not supported "ondragend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondragenter() {
        throw new UnexpectedCallError('Not supported "ondragenter" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondragleave() {
        throw new UnexpectedCallError('Not supported "ondragleave" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondragover() {
        throw new UnexpectedCallError('Not supported "ondragover" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondragstart() {
        throw new UnexpectedCallError('Not supported "ondragstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondrop() {
        throw new UnexpectedCallError('Not supported "ondrop" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ondurationchange() {
        throw new UnexpectedCallError('Not supported "ondurationchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onemptied() {
        throw new UnexpectedCallError('Not supported "onemptied" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onended() {
        throw new UnexpectedCallError('Not supported "onended" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onerror() {
        throw new UnexpectedCallError('Not supported "onerror" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onfocus() {
        throw new UnexpectedCallError('Not supported "onfocus" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onformdata() {
        throw new UnexpectedCallError('Not supported "onformdata" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onfullscreenchange() {
        throw new UnexpectedCallError('Not supported "onfullscreenchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onfullscreenerror() {
        throw new UnexpectedCallError('Not supported "onfullscreenerror" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ongotpointercapture() {
        throw new UnexpectedCallError('Not supported "ongotpointercapture" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oninput() {
        throw new UnexpectedCallError('Not supported "oninput" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get oninvalid() {
        throw new UnexpectedCallError('Not supported "oninvalid" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onkeydown() {
        throw new UnexpectedCallError('Not supported "onkeydown" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onkeypress() {
        throw new UnexpectedCallError('Not supported "onkeypress" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onkeyup() {
        throw new UnexpectedCallError('Not supported "onkeyup" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onload() {
        throw new UnexpectedCallError('Not supported "onload" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onloadeddata() {
        throw new UnexpectedCallError('Not supported "onloadeddata" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onloadedmetadata() {
        throw new UnexpectedCallError('Not supported "onloadedmetadata" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onloadstart() {
        throw new UnexpectedCallError('Not supported "onloadstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onlostpointercapture() {
        throw new UnexpectedCallError('Not supported "onlostpointercapture" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmousedown() {
        throw new UnexpectedCallError('Not supported "onmousedown" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmouseenter() {
        throw new UnexpectedCallError('Not supported "onmouseenter" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmouseleave() {
        throw new UnexpectedCallError('Not supported "onmouseleave" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmousemove() {
        throw new UnexpectedCallError('Not supported "onmousemove" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmouseout() {
        throw new UnexpectedCallError('Not supported "onmouseout" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmouseover() {
        throw new UnexpectedCallError('Not supported "onmouseover" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onmouseup() {
        throw new UnexpectedCallError('Not supported "onmouseup" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpaste() {
        throw new UnexpectedCallError('Not supported "onpaste" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpause() {
        throw new UnexpectedCallError('Not supported "onpause" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onplay() {
        throw new UnexpectedCallError('Not supported "onplay" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onplaying() {
        throw new UnexpectedCallError('Not supported "onplaying" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointercancel() {
        throw new UnexpectedCallError('Not supported "onpointercancel" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerdown() {
        throw new UnexpectedCallError('Not supported "onpointerdown" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerenter() {
        throw new UnexpectedCallError('Not supported "onpointerenter" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerleave() {
        throw new UnexpectedCallError('Not supported "onpointerleave" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointermove() {
        throw new UnexpectedCallError('Not supported "onpointermove" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerout() {
        throw new UnexpectedCallError('Not supported "onpointerout" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerover() {
        throw new UnexpectedCallError('Not supported "onpointerover" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onpointerup() {
        throw new UnexpectedCallError('Not supported "onpointerup" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onprogress() {
        throw new UnexpectedCallError('Not supported "onprogress" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onratechange() {
        throw new UnexpectedCallError('Not supported "onratechange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onreset() {
        throw new UnexpectedCallError('Not supported "onreset" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onresize() {
        throw new UnexpectedCallError('Not supported "onresize" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onscroll() {
        throw new UnexpectedCallError('Not supported "onscroll" property');
    }
    get onscrollend() {
        throw new UnexpectedCallError('Not supported "onscrollend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onsecuritypolicyviolation() {
        throw new UnexpectedCallError('Not supported "onsecuritypolicyviolation" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onseeked() {
        throw new UnexpectedCallError('Not supported "onseeked" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onseeking() {
        throw new UnexpectedCallError('Not supported "onseeking" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onselect() {
        throw new UnexpectedCallError('Not supported "onselect" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onselectionchange() {
        throw new UnexpectedCallError('Not supported "onselectionchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onselectstart() {
        throw new UnexpectedCallError('Not supported "onselectstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onslotchange() {
        throw new UnexpectedCallError('Not supported "onslotchange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onstalled() {
        throw new UnexpectedCallError('Not supported "onstalled" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onsubmit() {
        throw new UnexpectedCallError('Not supported "onsubmit" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onsuspend() {
        throw new UnexpectedCallError('Not supported "onsuspend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontimeupdate() {
        throw new UnexpectedCallError('Not supported "ontimeupdate" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontoggle() {
        throw new UnexpectedCallError('Not supported "ontoggle" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontransitioncancel() {
        throw new UnexpectedCallError('Not supported "ontransitioncancel" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontransitionend() {
        throw new UnexpectedCallError('Not supported "ontransitionend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontransitionrun() {
        throw new UnexpectedCallError('Not supported "ontransitionrun" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get ontransitionstart() {
        throw new UnexpectedCallError('Not supported "ontransitionstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onvolumechange() {
        throw new UnexpectedCallError('Not supported "onvolumechange" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwaiting() {
        throw new UnexpectedCallError('Not supported "onwaiting" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwebkitanimationend() {
        throw new UnexpectedCallError('Not supported "onwebkitanimationend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwebkitanimationiteration() {
        throw new UnexpectedCallError('Not supported "onwebkitanimationiteration" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwebkitanimationstart() {
        throw new UnexpectedCallError('Not supported "onwebkitanimationstart" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwebkittransitionend() {
        throw new UnexpectedCallError('Not supported "onwebkittransitionend" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get onwheel() {
        throw new UnexpectedCallError('Not supported "onwheel" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://w3c.github.io/DOM-Parsing/#dom-element-outerhtml
     */
    get outerHTML() {
        throw new UnexpectedCallError('Not supported "outerHTML" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get outerText() {
        throw new UnexpectedCallError('Not supported "outerText" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/css-shadow-parts-1/#idl
     */
    get part() {
        throw new UnexpectedCallError('Not supported "part" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://html.spec.whatwg.org/multipage/popover.html#dom-popover
     */
    get popover() {
        throw new UnexpectedCallError('Not supported "popover" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-prefix%E2%91%A0
     */
    get prefix() {
        throw new UnexpectedCallError('Not supported "prefix" property');
    }
    /**
     * The element immediately prior the specified one in its parent's children list.
     *
     * @readonly
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-nondocumenttypechildnode-previouselementsibling%E2%91%A1
     */
    get previousElementSibling() {
        return previousElementSibling(this);
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    get rawName() {
        return this._astToken.nodeName;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://w3c.github.io/aria/#ARIAMixin
     */
    get role() {
        throw new UnexpectedCallError('Not supported "role" property');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get rule() {
        if (this.pretenderContext?.type === 'origin') {
            return this.pretenderContext.origin.rule;
        }
        return super.rule;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-scrollheight-1
     */
    get scrollHeight() {
        throw new UnexpectedCallError('Not supported "scrollHeight" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-scrollleft-1
     */
    get scrollLeft() {
        throw new UnexpectedCallError('Not supported "scrollLeft" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-scrolltop-1
     */
    get scrollTop() {
        throw new UnexpectedCallError('Not supported "scrollTop" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-scrollwidth-1
     */
    get scrollWidth() {
        throw new UnexpectedCallError('Not supported "scrollWidth" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-shadowroot%E2%91%A0
     */
    get shadowRoot() {
        throw new UnexpectedCallError('Not supported "shadowRoot" property');
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-slot%E2%91%A0
     */
    get slot() {
        return this.getAttribute('slot') ?? '';
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get spellcheck() {
        throw new UnexpectedCallError('Not supported "spellcheck" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get style() {
        throw new UnexpectedCallError('Not supported "style" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get tabIndex() {
        throw new UnexpectedCallError('Not supported "tabIndex" property');
    }
    /**
     * Returns the HTML-uppercased qualified name.
     *
     * If this is in the HTML namespace and its node document is an HTML document, then set qualifiedName to qualifiedName in ASCII uppercase.
     *
     * (In markuplint evaluation, the node document always is an HTML document.)
     *
     * ```html
     * <div> => "DIV"
     * <svg> => "svg"
     * <x-foo> => "X-FOO"
     * ```
     *
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-tagname%E2%91%A0
     */
    get tagName() {
        if (this.pretenderContext?.type === 'pretender') {
            return this.pretenderContext.as.nodeName;
        }
        return this.nodeName;
    }
    get textContent() {
        return [...this.childNodes].map(child => child.textContent ?? '').join('');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get title() {
        throw new UnexpectedCallError('Not supported "title" property');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    get translate() {
        throw new UnexpectedCallError('Not supported "translate" property');
    }
    /**
     * @implements DOM API: `Element`
     */
    after(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    ...nodes) {
        after(this, ...nodes);
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/web-animations-1/#dom-animatable-animate
     */
    animate(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    keyframes, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    options) {
        throw new UnexpectedCallError('Not supported "animate" method');
    }
    /**
     * @see https://html.spec.whatwg.org/multipage/scripting.html#dom-slot-assignednodes
     */
    assignedNodes() {
        if (this.localName !== 'slot') {
            throw new TypeError('assignedNodes is not a function');
        }
        return [];
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    attachInternals() {
        throw new UnexpectedCallError('Not supported "attachInternals" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-attachshadow%E2%91%A0
     */
    attachShadow(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    init) {
        throw new UnexpectedCallError('Not supported "attachShadow" method');
    }
    /**
     * @implements DOM API: `Element`
     */
    before(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    ...nodes) {
        before(this, ...nodes);
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    blur() {
        throw new UnexpectedCallError('Not supported "blur" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    checkVisibility(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    options) {
        throw new UnexpectedCallError('Not supported "checkVisibility" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    click() {
        throw new UnexpectedCallError('Not supported "click" method');
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-closest%E2%91%A0
     */
    closest(selectors) {
        // eslint-disable-next-line unicorn/no-this-assignment
        let el = this;
        do {
            if (el.matches(selectors)) {
                return el;
            }
            el = el.parentElement;
        } while (el !== null && el.is(el.ELEMENT_NODE));
        return null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     */
    computedStyleMap() {
        throw new UnexpectedCallError('Not supported "computedStyleMap" method');
    }
    fixNodeName(name) {
        __classPrivateFieldSet(this, _MLElement_fixedNodeName, name, "f");
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    focus(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    options) {
        throw new UnexpectedCallError('Not supported "focus" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    getAccessibleName(version) {
        return getAccname(this, version);
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/web-animations-1/#dom-animatable-getanimations
     */
    getAnimations(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    options) {
        throw new UnexpectedCallError('Not supported "getAnimations" method');
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-getattribute%E2%91%A0
     */
    getAttribute(attrName) {
        for (const attr of this.attributes) {
            if (attr.name.toLowerCase() === attrName.toLowerCase()) {
                return attr.value;
            }
        }
        return null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-getattributenodens
     */
    getAttributeNS(namespace, localName) {
        throw new UnexpectedCallError('Not supported "getAttributeNS" method');
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-getattributenames%E2%91%A0
     */
    getAttributeNames() {
        return [...this.attributes].map(attr => attr.name);
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-getattributenode
     */
    getAttributeNode(qualifiedName) {
        return this.getAttributeToken(qualifiedName)[0] ?? null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-getattributenodens
     */
    getAttributeNodeNS(namespace, localName) {
        throw new UnexpectedCallError('Not supported "getAttributeNodeNS" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    getAttributePretended(attrName) {
        for (const attr of __classPrivateFieldGet(this, _MLElement_attributes, "f")) {
            if (attr.name.toLowerCase() === attrName.toLowerCase()) {
                return attr.value;
            }
        }
        return null;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    getAttributeToken(attrName) {
        const attrs = [];
        attrName = attrName.toLowerCase();
        for (const attr of this.getAttributeTokens()) {
            if (attr.name === attrName) {
                attrs.push(attr);
            }
        }
        return attrs;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    getAttributeTokens() {
        return Object.freeze(this.pretenderContext?.type === 'pretender' ? __classPrivateFieldGet(this.pretenderContext.as, _MLElement_attributes, "f") : __classPrivateFieldGet(this, _MLElement_attributes, "f"));
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-getboundingclientrect-1
     */
    getBoundingClientRect() {
        throw new UnexpectedCallError('Not supported "getBoundingClientRect" method');
    }
    getChildElementsAndTextNodeWithoutWhitespaces() {
        if (__classPrivateFieldGet(this, _MLElement_getChildElementsAndTextNodeWithoutWhitespacesCache, "f")) {
            return __classPrivateFieldGet(this, _MLElement_getChildElementsAndTextNodeWithoutWhitespacesCache, "f");
        }
        const filteredNodes = [];
        for (const node of this.childNodes) {
            if (node.is(node.ELEMENT_NODE)) {
                if (node.isOmitted) {
                    const children = node.getChildElementsAndTextNodeWithoutWhitespaces();
                    filteredNodes.push(...children);
                }
                else {
                    filteredNodes.push(node);
                }
            }
            if (node.is(node.TEXT_NODE) && !node.isWhitespace()) {
                filteredNodes.push(node);
            }
        }
        __classPrivateFieldSet(this, _MLElement_getChildElementsAndTextNodeWithoutWhitespacesCache, filteredNodes, "f");
        return filteredNodes;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#ref-for-dom-element-getclientrects-1
     */
    getClientRects() {
        throw new UnexpectedCallError('Not supported "getClientRects" method');
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-getelementsbyclassname
     */
    getElementsByClassName(classNames) {
        return toHTMLCollection(this._descendantsToArray(node => {
            if (node.is(node.ELEMENT_NODE) && node.classList.contains(classNames)) {
                return node;
            }
        }));
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-getelementsbyclassname
     */
    getElementsByTagName(qualifiedName) {
        return toHTMLCollection(this._descendantsToArray(node => {
            if (node.is(node.ELEMENT_NODE) && node.nodeName.toLowerCase() === qualifiedName.toLowerCase()) {
                return node;
            }
        }));
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-getelementsbytagnamens
     */
    getElementsByTagNameNS(namespace, localName) {
        throw new UnexpectedCallError('Not supported "getElementsByTagNameNS" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    getNameLocation() {
        return {
            offset: this.startOffset,
            line: this.startLine,
            col: this.startCol + this.tagOpenChar.length,
        };
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-hasattribute%E2%91%A0
     */
    hasAttribute(qualifiedName) {
        return this.getAttribute(qualifiedName) !== null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-hasattributens%E2%91%A0
     */
    hasAttributeNS(namespace, localName) {
        throw new UnexpectedCallError('Not supported "hasAttributeNS" method');
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-hasattributes
     */
    hasAttributes() {
        return this.attributes.length > 0;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    hasMutableAttributes() {
        for (const attr of this.attributes) {
            if (!attr.nameNode) {
                return true;
            }
            if (attr.isDynamicValue) {
                return true;
            }
        }
        return false;
    }
    /**
     * This element has "Preprocessor Specific Block". In other words, Its children are potentially mutable.
     *
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    hasMutableChildren(attr = false) {
        for (const child of this.childNodes) {
            if (child.is(child.MARKUPLINT_PREPROCESSOR_BLOCK)) {
                return true;
            }
            if (child.is(child.ELEMENT_NODE)) {
                if (attr && child.hasMutableAttributes()) {
                    return true;
                }
                if (child.hasMutableChildren(attr)) {
                    return true;
                }
                if (child.localName === 'slot') {
                    return true;
                }
            }
        }
        return false;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/pointerevents2/#dom-element-haspointercapture
     */
    hasPointerCapture(pointerId) {
        throw new UnexpectedCallError('Not supported "hasPointerCapture" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://html.spec.whatwg.org/multipage/popover.html#dom-hidepopover
     */
    hidePopover() {
        throw new UnexpectedCallError('Not supported "hidePopover" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-insertadjacentelement
     */
    insertAdjacentElement(where, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    element) {
        // TODO:
        throw new UnexpectedCallError('Does not implement "insertAdjacentElement" method yet');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://w3c.github.io/DOM-Parsing/#widl-Element-insertAdjacentHTML-void-DOMString-position-DOMString-text
     */
    insertAdjacentHTML(position, text) {
        // TODO:
        throw new UnexpectedCallError('Does not implement "insertAdjacentHTML" method yet');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-insertadjacenttext
     */
    insertAdjacentText(where, data) {
        // TODO:
        throw new UnexpectedCallError('Does not implement "insertAdjacentText" method yet');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    isDescendantByUUIDList(uuidList) {
        let el = this.parentElement;
        if (el === null) {
            return false;
        }
        do {
            if (uuidList.includes(el.uuid)) {
                return true;
            }
            el = el.parentElement;
        } while (el !== null && el.is(el.ELEMENT_NODE));
        return false;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    isEmpty() {
        for (const childNode of this.childNodes) {
            if (!(childNode.is(childNode.TEXT_NODE) && childNode.textContent?.trim() === '')) {
                return false;
            }
        }
        return true;
    }
    /**
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-matches%E2%91%A0
     */
    matches(selector, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    scope) {
        return (createSelector(selector, this.ownerMLDocument.specs).match(
        // Prioritize the pretender
        this.pretenderContext?.type === 'pretender' ? this.pretenderContext.as : this, scope) !== false);
    }
    /**
     * Pretenders Initialization
     */
    pretending(pretenders) {
        const pretenderConfig = pretenders?.find(option => this.matches(option.selector));
        const asAttrValue = this.getAttribute('as');
        const pretenderElement = pretenderConfig?.as ??
            (this.elementType === 'html' || !asAttrValue
                ? null
                : {
                    element: asAttrValue,
                    inheritAttrs: true,
                });
        if (pretenderElement == null) {
            return;
        }
        let nodeName;
        let namespace = 'html';
        const attributes = [];
        let aria;
        if (typeof pretenderElement === 'string') {
            nodeName = pretenderElement;
        }
        else {
            nodeName = pretenderElement.element;
            namespace = pretenderElement.namespace ?? namespace;
            if (pretenderElement.inheritAttrs) {
                attributes.push(...this._astToken.attributes);
            }
            if (pretenderElement.attrs) {
                attributes.push(...pretenderElement.attrs.map(({ name, value }, i) => {
                    const _value = value == null
                        ? ''
                        : typeof value === 'string'
                            ? value
                            : this.getAttribute(value.fromAttr) ?? '';
                    return {
                        ...this._astToken,
                        uuid: `${this.uuid}_attr_${i}`,
                        type: 'attr',
                        nodeName: name,
                        spacesBeforeName: {
                            ...this._astToken,
                            raw: '',
                        },
                        name: {
                            ...this._astToken,
                            raw: name,
                        },
                        spacesBeforeEqual: {
                            ...this._astToken,
                            raw: '',
                        },
                        equal: {
                            ...this._astToken,
                            raw: '',
                        },
                        spacesAfterEqual: {
                            ...this._astToken,
                            raw: '',
                        },
                        startQuote: {
                            ...this._astToken,
                            raw: '',
                        },
                        value: {
                            ...this._astToken,
                            raw: _value,
                        },
                        endQuote: {
                            ...this._astToken,
                            raw: '',
                        },
                        isDuplicatable: true,
                        parentNode: null,
                        nextNode: null,
                        prevNode: null,
                        isFragment: false,
                        isGhost: false,
                    };
                }));
            }
            aria = pretenderElement.aria;
        }
        const as = new MLElement({
            ...this._astToken,
            uuid: this.uuid + '_pretender',
            raw: `<${nodeName}>`,
            nodeName,
            namespace,
            elementType: 'html',
            attributes,
        }, this.ownerMLDocument);
        as.resetChildren(this.childNodes);
        as.pretenderContext = {
            type: 'origin',
            origin: this,
        };
        this.pretenderContext = {
            type: 'pretender',
            as,
            aria,
        };
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/pointerevents2/#dom-element-releasepointercapture
     */
    releasePointerCapture(pointerId) {
        throw new UnexpectedCallError('Not supported "releasePointerCapture" method');
    }
    /**
     * @implements DOM API: `Element`
     */
    remove() {
        remove(this);
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-removeattribute
     */
    removeAttribute(qualifiedName) {
        throw new UnexpectedCallError('Not supported "removeAttribute" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-removeattributens%E2%91%A0
     */
    removeAttributeNS(namespace, localName) {
        throw new UnexpectedCallError('Not supported "removeAttributeNS" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-D589198
     */
    removeAttributeNode(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    attr) {
        throw new UnexpectedCallError('Not supported "removeAttributeNode" method');
    }
    /**
     * @implements DOM API: `Element`
     */
    replaceWith(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    ...nodes) {
        replaceWith(this, ...nodes);
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://fullscreen.spec.whatwg.org/#dom-element-requestfullscreen
     */
    requestFullscreen(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    options) {
        throw new UnexpectedCallError('Not supported "requestFullscreen" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://w3c.github.io/pointerlock/#dom-element-requestpointerlock
     */
    requestPointerLock() {
        throw new UnexpectedCallError('Not supported "requestPointerLock" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#dom-element-scroll
     */
    scroll(x, y) {
        throw new UnexpectedCallError('Not supported "scroll" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#dom-element-scrollby
     */
    scrollBy(x, y) {
        throw new UnexpectedCallError('Not supported "scrollBy" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#dom-element-scrollintoview
     */
    scrollIntoView(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    arg) {
        throw new UnexpectedCallError('Not supported "scrollIntoView" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/cssom-view-1/#dom-element-scrollto
     */
    scrollTo(x, y) {
        throw new UnexpectedCallError('Not supported "scrollTo" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-setattribute%E2%91%A0
     */
    setAttribute(qualifiedName, value) {
        throw new UnexpectedCallError('Not supported "setAttribute" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-setattributens%E2%91%A0
     */
    setAttributeNS(namespace, qualifiedName, value) {
        throw new UnexpectedCallError('Not supported "setAttributeNS" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-setattributenode
     */
    setAttributeNode(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    attr) {
        throw new UnexpectedCallError('Not supported "setAttributeNode" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#dom-element-setattributenodens
     */
    setAttributeNodeNS(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    attr) {
        throw new UnexpectedCallError('Not supported "setAttributeNodeNS" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://www.w3.org/TR/pointerevents2/#idl-def-element-setpointercapture-pointerid
     */
    setPointerCapture(pointerId) {
        throw new UnexpectedCallError('Not supported "setPointerCapture" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://html.spec.whatwg.org/multipage/popover.html#dom-showpopover
     */
    showPopover() {
        throw new UnexpectedCallError('Not supported "showPopover" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    toNormalizeString() {
        if (__classPrivateFieldGet(this, _MLElement_normalizedString, "f")) {
            return __classPrivateFieldGet(this, _MLElement_normalizedString, "f");
        }
        const children = this.getChildElementsAndTextNodeWithoutWhitespaces();
        const attrs = this.attributes.map(attr => attr.toNormalizeString());
        const attrString = attrs.length > 0 ? ' ' + attrs.join('') : '';
        const startTag = `<${this.nodeName}${attrString}>`;
        const childNodes = children.map(node => {
            if (node.is(node.ELEMENT_NODE)) {
                return node.toNormalizeString();
            }
            return node.raw;
        });
        const endTag = `</${this.nodeName}>`;
        const normalizedString = `${startTag}${childNodes.join('')}${endTag}`;
        __classPrivateFieldSet(this, _MLElement_normalizedString, normalizedString, "f");
        return normalizedString;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLElement`
     */
    toString(fixed = false) {
        if (!fixed) {
            return this.raw;
        }
        if (this.pretenderContext?.type === 'pretender') {
            return this.raw;
        }
        if (this.nodeName.startsWith('#')) {
            return this.raw;
        }
        if (this.isOmitted) {
            return this.raw;
        }
        let raw = this.raw;
        let offset = 0;
        const overlayedCommentNodes = this.ownerMLDocument.nodeList.filter(node => {
            if (node.is(node.COMMENT_NODE)) {
                return this.startOffset < node.startOffset && node.endOffset < this.endOffset;
            }
            return false;
        });
        const nodes = [
            {
                toString: () => this.tagOpenChar + this.fixedNodeName,
                startOffset: this.startOffset,
                endOffset: this.startOffset + this.tagOpenChar.length + this.nodeName.length,
            },
            ...overlayedCommentNodes,
            ...this.attributes,
        ];
        for (const node of nodes) {
            const before = raw.slice(0, node.startOffset + offset - this.startOffset);
            const rawCode = node.toString(true);
            const after = raw.slice(node.endOffset + offset - this.startOffset);
            raw = before + rawCode + after;
            offset += rawCode.length - (node.endOffset - node.startOffset);
        }
        return raw;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-element-toggleattribute%E2%91%A0
     */
    toggleAttribute(qualifiedName, force) {
        throw new UnexpectedCallError('Not supported "toggleAttribute" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Element`
     * @see https://html.spec.whatwg.org/multipage/popover.html#dom-togglepopover
     */
    togglePopover(force) {
        throw new UnexpectedCallError('Not supported "togglePopover" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @deprecated
     * @unsupported
     * @implements DOM API: `Element`
     */
    webkitMatchesSelector(selectors) {
        throw new UnexpectedCallError('Not supported "webkitMatchesSelector" method');
    }
}
_MLElement_attributes = new WeakMap(), _MLElement_fixedNodeName = new WeakMap(), _MLElement_getChildElementsAndTextNodeWithoutWhitespacesCache = new WeakMap(), _MLElement_localName = new WeakMap(), _MLElement_normalizedAttrs = new WeakMap(), _MLElement_normalizedString = new WeakMap();
