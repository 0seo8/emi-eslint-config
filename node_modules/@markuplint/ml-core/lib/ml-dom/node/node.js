var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MLNode_childNodes, _MLNode_ownerDocument, _MLNode_prevToken;
import { MLToken } from '../token/token.js';
import { isChildNode } from './child-node.js';
import { toNodeList } from './node-list.js';
import { nodeStore } from './node-store.js';
import { UnexpectedCallError } from './unexpected-call-error.js';
export class MLNode extends MLToken {
    constructor(astNode, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    document) {
        super(astNode);
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.ATTRIBUTE_NODE = 2;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.CDATA_SECTION_NODE = 4;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.COMMENT_NODE = 8;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.DOCUMENT_FRAGMENT_NODE = 11;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.DOCUMENT_NODE = 9;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_contained_by
         */
        this.DOCUMENT_POSITION_CONTAINED_BY = 16;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_contains
         */
        this.DOCUMENT_POSITION_CONTAINS = 0b1000;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_disconnected
         */
        this.DOCUMENT_POSITION_DISCONNECTED = 0b1;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_following
         */
        this.DOCUMENT_POSITION_FOLLOWING = 0b100;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_implementation_specific
         */
        this.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC = 32;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#dom-node-document_position_preceding
         */
        this.DOCUMENT_POSITION_PRECEDING = 0b10;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.DOCUMENT_TYPE_NODE = 10;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.ELEMENT_NODE = 1;
        /**
         * @deprecated
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.ENTITY_NODE = 6;
        /**
         * @deprecated
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.ENTITY_REFERENCE_NODE = 5;
        /**
         * @implements `@markuplint/ml-core` API: `MLNode`
         */
        this.MARKUPLINT_PREPROCESSOR_BLOCK = 101;
        /**
         * @deprecated
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.NOTATION_NODE = 12;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.PROCESSING_INSTRUCTION_NODE = 7;
        /**
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#interface-node
         */
        this.TEXT_NODE = 3;
        /**
         * Cached `childNodes` property
         */
        _MLNode_childNodes.set(this, void 0);
        /**
         * Owner `Document`
         *
         * @implements DOM API: `Node`
         * @see https://dom.spec.whatwg.org/#ref-for-dom-node-ownerdocument
         */
        _MLNode_ownerDocument.set(this, void 0);
        /**
         * Cached `prevToken` property
         */
        _MLNode_prevToken.set(this, void 0);
        /**
         *
         */
        this.rules = {};
        this._astToken = astNode;
        __classPrivateFieldSet(this, _MLNode_ownerDocument, document, "f");
        nodeStore.setNode(astNode, this);
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-baseuri%E2%91%A0
     */
    get baseURI() {
        throw new UnexpectedCallError('Not supported "baseURI" property');
    }
    /**
     * The list of child nodes that contains `Element`, `Text`, and `Comment`.
     *
     * @readonly
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-childnodes%E2%91%A0
     */
    get childNodes() {
        if (__classPrivateFieldGet(this, _MLNode_childNodes, "f") != null) {
            return __classPrivateFieldGet(this, _MLNode_childNodes, "f");
        }
        if (this.is(this.DOCUMENT_NODE)) {
            const childNodes = [];
            for (const node of this.nodeList) {
                if (isChildNode(node) && (node.parentNode === this || node.parentNode === null)) {
                    childNodes.push(node);
                }
            }
            // Cache
            __classPrivateFieldSet(this, _MLNode_childNodes, toNodeList(childNodes), "f");
            return __classPrivateFieldGet(this, _MLNode_childNodes, "f");
        }
        if (this.is(this.DOCUMENT_FRAGMENT_NODE) ||
            this.is(this.ELEMENT_NODE) ||
            this.is(this.MARKUPLINT_PREPROCESSOR_BLOCK)) {
            const astChildren = 
            // @ts-ignore
            this._astToken?.childNodes?.filter(node => {
                if (node.type === 'endtag' || node.type === 'invalid') {
                    return null;
                }
                return node;
            }) ?? [];
            const childNodes = astChildren
                .map(node => nodeStore.getNode(node))
                .filter(node => isChildNode(node));
            // Cache
            __classPrivateFieldSet(this, _MLNode_childNodes, toNodeList(childNodes), "f");
            return __classPrivateFieldGet(this, _MLNode_childNodes, "f");
        }
        // Cache
        __classPrivateFieldSet(this, _MLNode_childNodes, toNodeList([]), "f");
        return __classPrivateFieldGet(this, _MLNode_childNodes, "f");
    }
    /**
     * The first node that may be `Element`, `Text`, and `CommentNode`.
     *
     * @readonly
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-firstchild%E2%91%A0
     */
    get firstChild() {
        return this.childNodes[0] ?? null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-isconnected%E2%91%A0
     */
    get isConnected() {
        throw new UnexpectedCallError('Not supported "isConnected" property');
    }
    /**
     * The last node that may be `Element`, `Text`, and `CommentNode`.
     *
     * @readonly
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-lastchild%E2%91%A0
     */
    get lastChild() {
        // eslint-disable-next-line unicorn/prefer-at
        return this.childNodes[this.childNodes.length - 1] ?? null;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get nextNode() {
        const siblings = [...(this.syntacticalParentNode?.childNodes ?? __classPrivateFieldGet(this, _MLNode_ownerDocument, "f").nodeList)];
        const index = siblings.findIndex(node => node.uuid === this.uuid);
        return siblings[index + 1] ?? null;
    }
    /**
     * The next sibling of an object is its first following sibling or null if it has no following sibling.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#concept-tree-next-sibling
     */
    get nextSibling() {
        let nextNode = this.nextNode;
        while (nextNode) {
            if (isChildNode(nextNode) &&
                ((this.parentNode === null && nextNode.parentNode === null) ||
                    this.parentNode?.uuid === nextNode.parentNode?.uuid)) {
                return nextNode;
            }
            nextNode = nextNode.nextNode;
        }
        return null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * It must not call from the instance of the `MLNode` class.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-nodename%E2%91%A0
     */
    get nodeName() {
        throw new Error('It must not call from the instance of the `MLNode` class');
    }
    /**
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-nodetype%E2%91%A0
     */
    get nodeType() {
        return -1;
    }
    /**
     * The nodeValue getter steps are to return the following, switching on the interface this implements:
     *
     * - `Attr`: this’s value.
     * - `CharacterData`: this’s data.
     * - _Otherwise_: Null.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-nodevalue
     */
    get nodeValue() {
        return null;
    }
    /**
     * The `Document` that this node belongs to.
     *
     * @deprecated
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-ownerdocument%E2%91%A0
     */
    get ownerDocument() {
        return __classPrivateFieldGet(this, _MLNode_ownerDocument, "f");
    }
    get ownerMLDocument() {
        return __classPrivateFieldGet(this, _MLNode_ownerDocument, "f");
    }
    /**
     * The parent element.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-parentelement%E2%91%A0
     */
    get parentElement() {
        let parent = this.parentNode;
        while (parent) {
            if (parent.is(parent.ELEMENT_NODE)) {
                return parent;
            }
            parent = parent.parentNode;
        }
        return null;
    }
    /**
     * The parent node that may be `Element`, `Document`, `DocumentFragment`, and `null`.
     *
     * ## HTML:
     *
     * ```html
     * <html> // => #document
     *   <body></body> // => <html>
     * </html>
     * ```
     *
     * ---
     *
     * ```html
     * <div> // => null
     *   <span></span> // => <div>
     * </div>
     * ```
     *
     * ## JSX:
     *
     * ```jsx
     * <> // => null
     *   <div> // => #document-fragment
     *     {items.map(item => {
     *       return (
     *         <span /> // => null
     *       )
     *     })}
     *   </div>
     * </>
     * ```
     *
     * ## Pug
     *
     * ```jade
     * //- null
     * div
     *   //- <div>
     *   if foo
     *     //- null
     *     span
     * ```
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-parentnode%E2%91%A0
     */
    get parentNode() {
        const parentNode = this.syntacticalParentNode;
        if (!parentNode) {
            return null;
        }
        if (parentNode.is(parentNode.MARKUPLINT_PREPROCESSOR_BLOCK)) {
            if (parentNode.isTransparent) {
                return parentNode.parentNode;
            }
            return null;
        }
        if (parentNode.is(parentNode.ELEMENT_NODE) || parentNode.is(parentNode.DOCUMENT_FRAGMENT_NODE)) {
            return parentNode;
        }
        if (parentNode.is(parentNode.DOCUMENT_NODE) && parentNode.isFragment) {
            return null;
        }
        return parentNode;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get prevNode() {
        const siblings = [...(this.syntacticalParentNode?.childNodes ?? __classPrivateFieldGet(this, _MLNode_ownerDocument, "f").nodeList)];
        const index = siblings.findIndex(node => node.uuid === this.uuid);
        return siblings[index - 1] ?? null;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get prevToken() {
        if (__classPrivateFieldGet(this, _MLNode_prevToken, "f") !== undefined) {
            return __classPrivateFieldGet(this, _MLNode_prevToken, "f");
        }
        let index = -1;
        for (let i = 0; i < this.ownerMLDocument.nodeList.length; i++) {
            const node = this.ownerMLDocument.nodeList[i];
            if (!node) {
                continue;
            }
            if (node.is(this.ELEMENT_NODE) && node.isOmitted) {
                continue;
            }
            if (node.uuid === this.uuid) {
                index = i;
                break;
            }
        }
        if (index === -1) {
            __classPrivateFieldSet(this, _MLNode_prevToken, null, "f");
            return __classPrivateFieldGet(this, _MLNode_prevToken, "f");
        }
        __classPrivateFieldSet(this, _MLNode_prevToken, this.ownerMLDocument.nodeList[index - 1] ?? null, "f");
        return __classPrivateFieldGet(this, _MLNode_prevToken, "f") ?? null;
    }
    /**
     * The previous sibling of an object is its first preceding sibling or null if it has no preceding sibling.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#concept-tree-previous-sibling
     */
    get previousSibling() {
        let prevNode = this.prevNode;
        while (prevNode) {
            if (isChildNode(prevNode) &&
                ((this.parentNode === null && prevNode.parentNode === null) ||
                    this.parentNode?.uuid === prevNode.parentNode?.uuid)) {
                return prevNode;
            }
            prevNode = prevNode.prevNode;
        }
        return null;
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get rule() {
        if (!this.ownerMLDocument.currentRule) {
            throw new Error('Invalid call: Some rule evaluations may not be running asynchronously.');
        }
        const name = this.ownerMLDocument.currentRule.name;
        const settingRule = this.rules[name];
        const rule = this.ownerMLDocument.currentRule.optimizeOption(settingRule);
        // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions
        if (!rule) {
            throw new Error(`Rule data "${name}" doesn't exist in rules ([${Object.keys(this.rules).map(name => `"${name}"`)}]) of ${this.nodeName}("${this.raw}")`);
        }
        return rule;
    }
    /**
     * Returns a syntactical parent node
     *
     * ## HTML:
     *
     * ```html
     * <html> // => #document
     *   <body></body> // => <html>
     * </html>
     * ```
     *
     * ## JSX:
     *
     * ```jsx
     * <> // => #document
     *   <div> // => #document-fragment
     *     {items.map(item => {
     *       return (
     *         <span /> // => #ml-block
     *       )
     *     })}
     *   </div>
     * </>
     * ```
     *
     * ## Pug
     *
     * ```jade
     * //- #document
     * div
     *   //- <div>
     *   if foo
     *     //- #ml-block
     *     span
     * ```
     *
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    get syntacticalParentNode() {
        if (this._astToken.type === 'attr' || this._astToken.type === 'spread') {
            return null;
        }
        if (!this._astToken.parentNode) {
            return this.ownerMLDocument;
        }
        return nodeStore.getNode(this._astToken.parentNode);
    }
    /**
     * Return the text content.
     *
     * - If the node is a `Comment`, or `Text`, textContent returns, or sets, the text inside the node, i.e., the Node.nodeValue.
     * - For other node types, textContent returns the concatenation of the textContent of every child node, excluding comments and processing instructions. (This is an empty string if the node has no children.)
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-textcontent
     */
    get textContent() {
        return null;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `EventTarget`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-addeventlistener%E2%91%A2
     */
    addEventListener(type, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    callback, options = {}) {
        throw new UnexpectedCallError('Not supported "addEventListener" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-appendchild
     */
    appendChild(node) {
        throw new UnexpectedCallError('Not supported "appendChild" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-clonenode%E2%91%A0
     */
    cloneNode(deep) {
        throw new UnexpectedCallError('Not supported "appendChild" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-comparedocumentposition%E2%91%A0
     */
    compareDocumentPosition(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    other) {
        throw new UnexpectedCallError('Not supported "compareDocumentPosition" method');
    }
    /**
     * Returns true if other is an inclusive descendant of node; otherwise false.
     *
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-contains%E2%91%A0
     */
    contains(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    other) {
        for (const childNode of this.childNodes) {
            if (other?.uuid === childNode.uuid || childNode.contains(other)) {
                return true;
            }
        }
        return false;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `EventTarget`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-dispatchevent%E2%91%A2
     */
    dispatchEvent(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    event) {
        throw new UnexpectedCallError('Not supported "dispatchEvent" method');
    }
    /**
     * Finds subsequent nodes that match the given selector.
     *
     * @implements `@markuplint/ml-core` API: `MLNode`
     * @param selector - Optional selector to filter the nodes.
     * @returns An array of matched child nodes.
     */
    findSubsequentNodes(selector) {
        const matched = [];
        for (const node of this.ownerMLDocument.nodeList) {
            if (node.endOffset <= this.endOffset) {
                continue;
            }
            if (this.contains(node)) {
                continue;
            }
            if (selector) {
                if (node.is(node.ELEMENT_NODE) && node.matches(selector)) {
                    matched.push(node);
                }
                continue;
            }
            if (isChildNode(node)) {
                matched.push(node);
            }
        }
        return matched;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-getrootnode%E2%91%A0
     */
    getRootNode(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    options) {
        if (options) {
            throw new UnexpectedCallError('Not supported options');
        }
        // The original DOM API returns a document fragment if the element is a fragment.
        return __classPrivateFieldGet(this, _MLNode_ownerDocument, "f");
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-haschildnodes%E2%91%A0
     */
    hasChildNodes() {
        throw new UnexpectedCallError('Not supported "hasChildNodes" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-insertbefore
     */
    insertBefore(node, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    child) {
        throw new UnexpectedCallError('Not supported "insertBefore" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    is(nodeType) {
        return this.nodeType === nodeType;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-isdefaultnamespace
     */
    isDefaultNamespace(namespace) {
        throw new UnexpectedCallError('Not supported "isDefaultNamespace" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-isequalnode%E2%91%A0
     */
    isEqualNode(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    otherNode) {
        throw new UnexpectedCallError('Not supported "isEqualNode" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    isInFragmentDocument() {
        return this.ownerMLDocument.isFragment;
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-issamenode
     */
    isSameNode(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    otherNode) {
        throw new UnexpectedCallError('Not supported "isSameNode" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-lookupnamespaceuri
     */
    lookupNamespaceURI(prefix) {
        throw new UnexpectedCallError('Not supported "lookupNamespaceURI" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
     */
    lookupPrefix(namespace) {
        throw new UnexpectedCallError('Not supported "lookupPrefix" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-node-normalize%E2%91%A0
     */
    normalize() {
        throw new UnexpectedCallError('Not supported "normalize" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-removechild
     */
    removeChild(child) {
        throw new UnexpectedCallError('Not supported "removeChild" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `EventTarget`
     * @see https://dom.spec.whatwg.org/#ref-for-dom-eventtarget-removeeventlistener%E2%91%A1
     */
    removeEventListener(type, 
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    callback, options = {}) {
        throw new UnexpectedCallError('Not supported "removeEventListener" method');
    }
    /**
     * **IT THROWS AN ERROR WHEN CALLING THIS.**
     *
     * @unsupported
     * @implements DOM API: `Node`
     * @see https://dom.spec.whatwg.org/#dom-node-replacechild
     */
    replaceChild(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    node, child) {
        throw new UnexpectedCallError('Not supported "removeChild" method');
    }
    /**
     * @implements `@markuplint/ml-core` API: `MLNode`
     */
    resetChildren(
    // eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
    childNodes) {
        __classPrivateFieldSet(this, _MLNode_childNodes, childNodes ?? __classPrivateFieldGet(this, _MLNode_childNodes, "f"), "f");
    }
}
_MLNode_childNodes = new WeakMap(), _MLNode_ownerDocument = new WeakMap(), _MLNode_prevToken = new WeakMap();
