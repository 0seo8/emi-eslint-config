import path from 'node:path';
import { generalImport } from './general-import.js';
import { toRegexp } from './utils.js';
const parsers = new Map();
export async function resolveParser(file, parserConfig, parserOptions) {
    parserConfig = {
        ...parserConfig,
        '/\\.html?$/i': '@markuplint/html-parser',
    };
    parserOptions = parserOptions ?? {};
    let parserModName = '@markuplint/html-parser';
    let matched = false;
    for (const pattern of Object.keys(parserConfig)) {
        // eslint-disable-next-line unicorn/prefer-regexp-test
        if (path.basename(file.path).match(toRegexp(pattern))) {
            const modName = parserConfig[pattern];
            if (!modName) {
                continue;
            }
            parserModName = modName;
            matched = true;
            break;
        }
    }
    const parser = await importParser(parserModName);
    return {
        parserModName,
        parser,
        parserOptions,
        matched,
    };
}
async function importParser(parserModName) {
    const entity = parsers.get(parserModName);
    if (entity) {
        return entity;
    }
    const parserMod = await generalImport(parserModName);
    if (!parserMod) {
        throw new Error(`Parser module "${parserModName}" is not found.`);
    }
    // TODO: To be dropped in v5
    if (!('parser' in parserMod)) {
        return parserMod;
    }
    return parserMod.parser;
}
