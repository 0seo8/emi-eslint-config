import c from 'cli-color';
import Enquirer from 'enquirer';
export async function select(question) {
    const res = await Enquirer.prompt({
        ...question,
        name: '__Q__',
        type: 'select',
        result(resName) {
            // @ts-ignore
            return this.options.choices.find(c => c.name === resName)?.value;
        },
    });
    // @ts-ignore
    return res['__Q__'];
}
export async function multiSelect(question) {
    const res = await Enquirer.prompt({
        ...question,
        name: '__Q__',
        type: 'multiselect',
        result(names) {
            // @ts-ignore
            const map = this.map(names);
            // @ts-ignore
            const values = names.map(name => map[name]);
            return values;
        },
    });
    // @ts-ignore
    return res['__Q__'];
}
export async function input(question, validation) {
    // eslint-disable-next-line no-constant-condition
    while (true) {
        const _res = await Enquirer.prompt({
            message: question,
            name: '__Q__',
            type: 'input',
        });
        // @ts-ignore
        const res = _res['__Q__'];
        if (validation && !validation.test(res)) {
            process.stdout.write(c.yellow('Oops! The name that you type is an invalid format.\n'));
            continue;
        }
        return res;
    }
}
export async function confirm(question, options) {
    const res = await Enquirer.prompt({
        message: question,
        name: '__Q__',
        type: 'confirm',
        initial: !!options?.initial,
    });
    // @ts-ignore
    return !!res['__Q__'];
}
export async function confirmSequence(questions) {
    const res = await Enquirer.prompt(questions.map(question => {
        return {
            ...question,
            type: 'confirm',
        };
    }));
    return res;
}
