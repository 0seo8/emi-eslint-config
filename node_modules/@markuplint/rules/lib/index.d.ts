declare const rules: {
    readonly 'attr-duplication': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'attr-value-quotes': Readonly<import("@markuplint/ml-core").RuleSeed<import("./attr-value-quotes/index.js").Type, undefined>>;
    readonly 'case-sensitive-attr-name': Readonly<import("@markuplint/ml-core").RuleSeed<import("./case-sensitive-attr-name/index.js").Value, undefined>>;
    readonly 'case-sensitive-tag-name': Readonly<import("@markuplint/ml-core").RuleSeed<import("./case-sensitive-tag-name/index.js").Value, undefined>>;
    readonly 'character-reference': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'class-naming': Readonly<import("@markuplint/ml-core").RuleSeed<import("./class-naming/index.js").Value, undefined>>;
    readonly 'deprecated-attr': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'deprecated-element': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'disallowed-element': Readonly<import("@markuplint/ml-core").RuleSeed<string[], undefined>>;
    readonly doctype: Readonly<import("@markuplint/ml-core").RuleSeed<"always", {
        denyObsoleteType: boolean;
    }>>;
    readonly 'end-tag': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, undefined>>;
    readonly 'heading-levels': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, null>>;
    readonly 'id-duplication': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'ineffective-attr': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'invalid-attr': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, {
        allowAttrs?: Record<string, {
            enum: [string, ...string[]];
        } | {
            pattern: string;
        } | {
            type: import("packages/@markuplint/ml-spec/lib/index.js").AttributeType;
        }> | (string | {
            name: string;
            value: import("packages/@markuplint/ml-spec/lib/index.js").AttributeType | ({
                enum: [string, ...string[]];
            } | {
                pattern: string;
            } | {
                type: import("packages/@markuplint/ml-spec/lib/index.js").AttributeType;
            });
        })[] | undefined;
        disallowAttrs?: Record<string, {
            enum: [string, ...string[]];
        } | {
            pattern: string;
        } | {
            type: import("packages/@markuplint/ml-spec/lib/index.js").AttributeType;
        }> | (string | {
            name: string;
            value: import("packages/@markuplint/ml-spec/lib/index.js").AttributeType | ({
                enum: [string, ...string[]];
            } | {
                pattern: string;
            } | {
                type: import("packages/@markuplint/ml-spec/lib/index.js").AttributeType;
            });
        })[] | undefined;
        ignoreAttrNamePrefix?: string | string[] | undefined;
        allowToAddPropertiesForPretender?: boolean | undefined;
        attrs?: Record<string, ({
            enum: [string, ...string[]];
        } | {
            pattern: string;
        } | {
            type: import("packages/@markuplint/ml-spec/lib/index.js").AttributeType;
        }) | {
            disallowed: true;
        }> | undefined;
    }>>;
    readonly 'label-has-control': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'landmark-roles': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, {
        ignoreRoles: (("banner" | "main" | "complementary" | "contentinfo") | "form" | "navigation" | "region")[];
        labelEachArea: boolean;
    }>>;
    readonly 'neighbor-popovers': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'no-boolean-attr-value': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'no-consecutive-br': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'no-default-value': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'no-duplicate-dt': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'no-empty-palpable-content': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, {
        extendsExposableElements?: boolean | undefined;
        ignoreIfAriaBusy?: boolean | undefined;
    }>>;
    readonly 'no-hard-code-id': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, undefined>>;
    readonly 'no-refer-to-non-existent-id': Readonly<import("@markuplint/ml-core").RuleSeed<import("@markuplint/ml-core").RuleConfigValue, {
        ariaVersion: "1.1" | "1.2" | "1.3";
        fragmentRefersNameAttr: boolean;
    }>>;
    readonly 'no-use-event-handler-attr': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, {
        ignore?: string | string[] | undefined;
    }>>;
    readonly 'permitted-contents': Readonly<import("@markuplint/ml-core").RuleSeed<import("packages/@markuplint/rules/src/permitted-contents/types.js").TagRule[], import("packages/@markuplint/rules/src/permitted-contents/types.js").Options>>;
    readonly 'placeholder-label-option': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, undefined>>;
    readonly 'require-accessible-name': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, {
        ariaVersion: "1.1" | "1.2" | "1.3";
    }>>;
    readonly 'require-datetime': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, {
        langs?: import("packages/@markuplint/rules/src/require-datetime/types.js").Lang[] | undefined;
    }>>;
    readonly 'required-attr': Readonly<import("@markuplint/ml-core").RuleSeed<string | (string | {
        name: string;
        value?: string | string[] | undefined;
    })[], undefined>>;
    readonly 'required-element': Readonly<import("@markuplint/ml-core").RuleSeed<string[], {
        ignoreHasMutableContents: boolean;
    }>>;
    readonly 'required-h1': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, import("./required-h1/index.js").Options>>;
    readonly 'use-list': Readonly<import("@markuplint/ml-core").RuleSeed<readonly string[], {
        spaceNeededBullets?: string[] | undefined;
        noPrev?: boolean | undefined;
        prevElement?: boolean | undefined;
        prevComment?: boolean | undefined;
        prevCodeBlock?: boolean | undefined;
    }>>;
    readonly 'wai-aria': Readonly<import("@markuplint/ml-core").RuleSeed<boolean, import("packages/@markuplint/rules/src/wai-aria/types.js").Options>>;
};
export default rules;
