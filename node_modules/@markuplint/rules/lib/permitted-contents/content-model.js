import { getContentModel } from '@markuplint/ml-spec';
import { start } from './start.js';
export function contentModel(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, rules, options) {
    const { model, specs } = createModel(el, rules);
    if (model == null) {
        return [
            {
                type: 'MATCHED',
                scope: el,
                query: '*',
                hint: {},
            },
        ];
    }
    const result = start(model, el, specs, options);
    return result;
}
function createModel(
// eslint-disable-next-line @typescript-eslint/prefer-readonly-parameter-types
el, rules) {
    const specs = cachedSpecs(el.ownerMLDocument.specs, rules);
    const model = getContentModel(el, specs.specs);
    return {
        model,
        specs,
    };
}
const caches = new Map();
function cachedSpecs(specs, rules) {
    if (rules.length === 0) {
        return specs;
    }
    const key = JSON.stringify(rules);
    const cached = caches.get(key);
    if (cached) {
        return cached;
    }
    const merged = {
        ...specs,
        specs: [
            ...specs.specs,
            ...rules.map(tag => ({
                name: tag.tag,
                contentModel: tag,
            })),
        ],
    };
    caches.set(key, merged);
    return merged;
}
