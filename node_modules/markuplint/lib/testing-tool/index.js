import { MLRule } from '@markuplint/ml-core';
import { lint } from '../api/index.js';
import { getGlobal } from '../global-settings.js';
export async function mlTest(sourceCode, config, rules, locale = 'en', fix = false) {
    const global = getGlobal();
    const results = await lint([{ sourceCode }], {
        config,
        rules,
        locale: locale ?? global.locale,
        fix,
        ignoreExt: true,
        autoLoad: true,
        importPresetRules: !rules,
    });
    const result = results[0];
    return {
        violations: result?.violations ?? [],
        fixedCode: result?.fixedCode ?? sourceCode,
    };
}
export async function mlRuleTest(rule, sourceCode, 
// eslint-disable-next-line unicorn/no-object-as-default-parameter
config = { rule: true }, fix = false, locale = 'en') {
    const _config = {
        ...config,
        rules: config.rule === undefined
            ? config.rule === undefined && config.nodeRule === undefined && config.childNodeRule === undefined
                ? {
                    '<current-rule>': true,
                }
                : undefined
            : {
                '<current-rule>': config.rule,
            },
        nodeRules: config.nodeRule === undefined
            ? undefined
            : config.nodeRule.map(nodeConfig => ({
                ...nodeConfig,
                rules: nodeConfig.rule === undefined
                    ? undefined
                    : {
                        '<current-rule>': nodeConfig.rule,
                    },
            })),
        childNodeRules: config.childNodeRule === undefined
            ? undefined
            : config.childNodeRule.map(childNodeConfig => ({
                ...childNodeConfig,
                rules: childNodeConfig.rule === undefined
                    ? undefined
                    : {
                        '<current-rule>': childNodeConfig.rule,
                    },
            })),
    };
    const res = await mlTest(sourceCode, _config, [
        new MLRule({
            name: '<current-rule>',
            ...rule,
        }),
    ], locale, fix);
    res.violations.map(v => {
        // @ts-ignore
        delete v.ruleId;
    });
    return res;
}
export async function mlTestFile(target, config, rules, locale, fix = false) {
    const global = getGlobal();
    const results = await lint([target], {
        config,
        rules,
        locale: locale ?? global.locale,
        fix,
        ignoreExt: true,
        noSearchConfig: !!config,
        autoLoad: true,
        importPresetRules: !rules,
    });
    const result = results[0];
    return {
        violations: result?.violations ?? [],
        fixedCode: result?.fixedCode ?? result?.sourceCode,
    };
}
