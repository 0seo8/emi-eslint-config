import type { APIOptions, MLEngineEventMap } from './types.js';
import type { MLResultInfo } from '../types.js';
import type { MLFile, Target } from '@markuplint/file-resolver';
import type { PlainData } from '@markuplint/ml-config';
import type { Document, RuleConfigValue } from '@markuplint/ml-core';
import { Emitter } from 'strict-event-emitter';
type MLEngineOptions = {
    readonly debug?: boolean;
    readonly watch?: boolean;
};
export type FromCodeOptions = APIOptions & MLEngineOptions & {
    readonly name?: string;
    readonly dirname?: string;
};
export declare class MLEngine extends Emitter<MLEngineEventMap> {
    #private;
    static fromCode(sourceCode: string, options?: FromCodeOptions): Promise<MLEngine>;
    static toMLFile(target: Target): Promise<MLFile | undefined>;
    constructor(file: Readonly<MLFile>, options?: APIOptions & MLEngineOptions);
    get document(): Document<RuleConfigValue, PlainData> | null;
    close(): Promise<void>;
    exec(): Promise<MLResultInfo | null>;
    setCode(code: string): Promise<void>;
    watchMode(enable: boolean): void;
    private createCore;
    private i18n;
    private onChange;
    private provide;
    private resolveConfig;
    private resolveParser;
    private resolveRules;
    private resolveRuleset;
    private resolveSchemas;
    private setup;
}
export {};
